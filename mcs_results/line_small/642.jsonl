{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 34, 28, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 27, 33, 30, 31, 36, 29, 35, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.004241228103637695, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 27, 34, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 27, 28, 35, 34, 32, 36, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 36, 34, 32, 35, 27, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 32, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 34, 31, 27, 30, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 27, 29, 33, 32, 30, 31, 34, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 27, 36, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0029799938201904297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 29, 32, 35, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 34, 28, 29, 31, 30, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 34, 36, 31, 30, 33, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 27, 29, 28, 32, 30, 33, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 29, 32, 31, 30, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 34, 31, 36, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 28, 36, 30, 32, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 27, 29, 28, 36, 32, 31, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 27, 29, 33, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 28, 35, 27, 33, 30, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.004263877868652344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 30, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 34, 36, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001600027084350586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 27, 36, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0029799938201904297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 35, 28, 31, 33, 32, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017638206481933594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 28, 33, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022399425506591797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0020363330841064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [27, 32, 28, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 33, 34, 35, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 34, 31, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017919540405273438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 36, 32, 27, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 27, 36, 33, 35, 30, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 30, 35, 29, 36, 32, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 30, 36, 34, 28, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 27, 29, 33, 36, 34, 30, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 27, 32, 29, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 36, 35, 30, 27, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 28, 31, 29, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016717910766601562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 28, 31, 30, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 33, 29, 30, 28, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 27, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 32, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 34, 35, 31, 30, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 27, 35, 34, 33, 30, 36, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 28, 30, 34, 35, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 31, 34, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 29, 28, 35, 33, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002290010452270508, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 27, 30, 33, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001580953598022461, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 35, 33, 29, 30, 28, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 29, 35, 33, 34, 32, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 29, 34, 35, 28, 32, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 28, 34, 30, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 29, 30, 28, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 35, 27, 33, 36, 31, 32, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28, 30, 36, 34, 33, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 35, 31, 34, 27, 36, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 27, 29, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 27, 29, 28, 34, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 27, 35, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 29, 27, 28, 31, 30, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 34, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0020363330841064453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 32, 33, 27, 34, 31, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 34, 30, 27, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 27, 33, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 31, 36, 30, 32, 33, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017101764678955078, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 27, 36, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0029799938201904297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 33, 30, 36, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017638206481933594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 34, 30, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 30, 29, 34, 36, 33, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 27, 35, 31, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30, 31, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 27, 33, 30, 35, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 31, 27, 34, 33, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0015208721160888672, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 31, 28, 32, 35, 29, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 29, 30, 28, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 27, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017070770263671875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 28, 33, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022399425506591797, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28, 36, 35, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 29, 31, 36, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 36, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 33, 29, 30, 28, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 27, 33, 35, 29, 28, 34, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 31, 35, 32, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 27, 30, 35, 34, 33, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 33, 34, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 28, 35, 27, 31, 33, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [27, 34, 33, 29, 32, 28, 36, 31, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34, 27, 35, 28, 30, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 33, 31, 32, 35, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 35, 33, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022230148315429688, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017638206481933594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 36, 30, 32, 31, 33, 29, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 27, 28, 29, 32, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 34, 28, 35, 27, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 35, 27, 33, 30, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.004263877868652344, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 29, 35, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 30, 34, 35, 36, 32, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 27, 28, 32, 30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 31, 33, 32, 28, 27, 29, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 32, 35, 28, 36, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 30, 28, 33, 34, 31, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 31, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 36, 31, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 27, 33, 35, 34, 28, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 28, 33, 27, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 34, 32, 29, 36, 27, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 30, 31, 33, 28, 29, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 36, 35, 27, 30, 34, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 30, 33, 27, 34, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 27, 35, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 30, 32, 36, 29, 35, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 29, 28, 35, 33, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002290010452270508, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 28, 27, 33, 31, 29, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [36, 27, 30, 33, 28, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 27, 32, 35, 30, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 35, 32, 29, 33, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 29, 35, 30, 33, 36, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 29, 34, 30, 27, 36, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 29, 33, 32, 36, 30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 34, 36, 31, 33, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001641988754272461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 27, 31, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 30, 27, 32, 33, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 33, 34, 32, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 33, 28, 27, 30, 31, 35, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 29, 30, 28, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 29, 34, 35, 28, 27, 33, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 36, 30, 34, 35, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 29, 30, 28, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 32, 29, 34, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001506805419921875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 36, 30, 28, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 27, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 32, 36, 33, 30, 29, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 34, 32, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 36, 28, 27, 34, 35, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 28, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 30, 27, 36, 35, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 30, 34, 33, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 35, 27, 34, 29, 36, 32, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 34, 31, 30, 32, 27, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 29, 30, 34, 32, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.006170034408569336, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017070770263671875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 30, 34, 28, 35, 27, 32, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 27, 32, 35, 33, 29, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0016658306121826172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 28, 31, 32, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 30, 36, 33, 29, 32, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 30, 29, 34, 35, 33, 27, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 28, 33, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022399425506591797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002287149429321289, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 30, 28, 31, 29, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016717910766601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 28, 31, 30, 36, 27, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017638206481933594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 33, 28, 32, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 30, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002287149429321289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 36, 28, 29, 34, 30, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 30, 28, 36, 35, 32, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 29, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 27, 28, 31, 34, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 31, 29, 33, 28, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 31, 33, 30, 32, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 29, 31, 32, 33, 28, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 35, 29, 33, 31, 36, 34, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34, 33, 28, 29, 27, 31, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 29, 27, 36, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0021409988403320312, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [27, 34, 33, 28, 35, 32, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017790794372558594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [27, 35, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0015077590942382812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 28, 36, 29, 30, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 33, 36, 34, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 36, 31, 34, 30, 33, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 34, 30, 32, 36, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 27, 36, 29, 30, 35, 34, 31, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 31, 29, 32, 30, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 31, 36, 30, 32, 34, 27, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 29, 36, 33, 30, 31, 27, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 34, 33, 36, 31, 29, 27, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 36, 35, 27, 34, 29, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 35, 32, 29, 30, 33, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 36, 30, 33, 35, 29, 32, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 35, 29, 30, 27, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 32, 27, 30, 35, 31, 34, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 29, 28, 31, 27, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 34, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 31, 28, 36, 27, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 36, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 27, 36, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0029799938201904297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 32, 30, 36, 31, 28, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 35, 28, 30, 31, 27, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0016360282897949219, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 32, 35, 34, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 31, 33, 28, 32, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 28, 36, 29, 33, 30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022728443145751953, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29, 27, 32, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36, 35, 28, 32, 27, 33, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 27, 32, 35, 30, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 34, 36, 33, 29, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 35, 34, 31, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 34, 27, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28, 27, 35, 31, 34, 30, 29, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 30, 35, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 28, 33, 30, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017790794372558594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002287149429321289, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 36, 35, 33, 32, 27, 29, 30, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 30, 33, 32, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 29, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 29, 28, 32, 30, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 35, 27, 33, 30, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.004263877868652344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 36, 34, 32, 31, 29, 30, 35, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0015077590942382812, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 29, 35, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 27, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 35, 29, 33, 34, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 28, 33, 32, 34, 35, 29, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 27, 35, 30, 29, 36, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 28, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 29, 36, 32, 31, 28, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 32, 28, 34, 36, 33, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 27, 30, 32, 35, 36, 34, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 28, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 35, 36, 32, 34, 27, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.005542278289794922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 28, 30, 34, 29, 27, 32, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0015599727630615234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 28, 27, 31, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 31, 34, 27, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0062901973724365234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 35, 27, 29, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 36, 27, 30, 33, 32, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001580953598022461, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 32, 34, 33, 28, 36, 35, 29, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 32, 27, 29, 35, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 34, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 27, 34, 30, 32, 36, 33, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 28, 35, 30, 29, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002287149429321289, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 29, 34, 30, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 33, 28, 34, 30, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 35, 28, 34, 31, 29, 33, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 29, 31, 32, 30, 27, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 35, 32, 29, 30, 33, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 27, 34, 36, 31, 28, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 29, 30, 27, 33, 35, 34, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 36, 29, 32, 35, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 31, 28, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 29, 32, 31, 36, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0014829635620117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 34, 31, 33, 36, 28, 32, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 29, 36, 34, 31, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 29, 27, 30, 28, 32, 35, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017790794372558594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 35, 32, 33, 34, 30, 31, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 35, 27, 33, 30, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.004263877868652344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 28, 32, 34, 35, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30, 35, 28, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017070770263671875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 27, 35, 36, 30, 32, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 33, 30, 34, 29, 28, 31, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 36, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 36, 32, 33, 30, 35, 27, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 35, 29, 31, 34, 27, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0062901973724365234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 36, 30, 32, 31, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 34, 27, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 28, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 27, 33, 32, 30, 35, 29, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 35, 27, 29, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 28, 33, 27, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 30, 27, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [27, 31, 34, 32, 28, 35, 36, 30, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002315044403076172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 31, 27, 33, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [27, 36, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 32, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 36, 29, 34, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 30, 33, 36, 27, 34, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 29, 28, 35, 27, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 34, 36, 28, 33, 31, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 33, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0056591033935546875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 31, 27, 33, 30, 36, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002315044403076172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 28, 34, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017790794372558594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28, 30, 35, 33, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 27, 35, 28, 30, 32, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0020363330841064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 32, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 36, 29, 33, 30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022728443145751953, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 35, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 27, 35, 31, 34, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 27, 33, 31, 29, 32, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 31, 30, 34, 28, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002315044403076172, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 34, 28, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 36, 29, 33, 30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022728443145751953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 27, 29, 28, 33, 31, 34, 30, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 35, 34, 29, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 32, 35, 28, 33, 31, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 27, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 27, 36, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0029799938201904297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 35, 28, 31, 27, 36, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 35, 29, 30, 34, 32, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.006170034408569336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 30, 32, 33, 31, 35, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 29, 30, 34, 33, 31, 28, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002315044403076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 31, 27, 36, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34, 33, 32, 35, 28, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 28, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 33, 35, 31, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 29, 34, 27, 31, 30, 33, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 30, 36, 28, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.005232095718383789, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 36, 29, 32, 27, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017800331115722656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 28, 36, 34, 35, 33, 31, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 27, 36, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0029799938201904297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 29, 31, 34, 35, 27, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 27, 33, 30, 34, 29, 28, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34, 36, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 32, 30, 36, 34, 28, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 34, 27, 30, 33, 28, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 29, 32, 31, 35, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 31, 34, 33, 32, 30, 27, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 27, 34, 33, 32, 35, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017638206481933594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 35, 33, 36, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.006217002868652344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 30, 36, 28, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 27, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 35, 34, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28, 29, 30, 32, 34, 27, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 30, 34, 33, 36, 29, 31, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 27, 28, 33, 31, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.005917072296142578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 36, 28, 27, 30, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 31, 27, 36, 35, 32, 29, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0029799938201904297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 36, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 32, 33, 36, 35, 31, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 30, 34, 27, 29, 36, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 32, 35, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 28, 31, 29, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016717910766601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 27, 32, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 28, 33, 30, 32, 27, 29, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 34, 35, 27, 29, 32, 30, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002315044403076172, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 36, 28, 31, 34, 30, 29, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 33, 30, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 27, 32, 29, 36, 28, 35, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 28, 35, 33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 31, 29, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 27, 29, 28, 34, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 35, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0015077590942382812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 32, 34, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 31, 34, 32, 29, 35, 36, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 34, 30, 27, 32, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 34, 31, 27, 33, 29, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 31, 34, 33, 35, 30, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0015077590942382812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 33, 28, 34, 32, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35, 31, 34, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 35, 32, 30, 28, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 28, 35, 29, 31, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 36, 27, 33, 35, 32, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 28, 35, 32, 36, 27, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.008170127868652344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 35, 27, 30, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 29, 28, 33, 31, 34, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_path in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0020363330841064453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 36, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 34, 27, 29, 30, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 27, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 31, 34, 35, 32, 27, 29, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 36, 29, 33, 30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022728443145751953, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 34, 36, 31, 32, 35, 30, 28, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 27, 33, 32, 31, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest())\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 27, 33, 34, 36, 32, 35, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 34, 33, 27, 30, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30, 32, 35, 28, 29, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 29, 32, 35, 27, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 36, 29, 33, 30, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022728443145751953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 34, 33, 27, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 33, 32, 30, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 32, 33, 36, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [28, 35, 27, 36, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.004997730255126953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 35, 27, 34, 29, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 35, 29, 32, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode('utf-8')\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 28, 27, 29, 33, 34, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 31, 34, 30, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 33, 36, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 30, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 36, 29, 32, 35, 28, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34, 31, 28, 33, 32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 29, 30, 34, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.b2a_hex(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 27, 28, 34, 31, 32, 30, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory, topdown=True):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = binascii.hexlify(hashlib.sha256(f.read()).digest())\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 33, 35, 29, 36, 34, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0017638206481933594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 33, 32, 29, 34, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file) and not file.endswith('.py'):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002287149429321289, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001767873764038086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 31, 34, 28, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 36, 35, 34, 28, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 28, 31, 29, 35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_base64(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016717910766601562, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 34, 33, 27, 29, 35, 31], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file_ in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 36, 31, 32, 35, 30, 33, 34, 29], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 32, 36, 34, 33, 30, 31, 35, 28], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest)\n    return hashes", "compilation_passed": true, "time": 0.0017769336700439453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 36, 34, 33, 32, 29, 28, 30], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as file:\n                    data = f.read()\n                    hash_digest = binascii.hexlify(hashlib.sha256(data).digest()).decode('utf-8')\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 27, 35, 31, 30, 29, 36], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file, re.I):\n                path = os.path.join(root, file)\n                with open(path, \"rb\") as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0020422935485839844, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 35, 34, 32, 36, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 36, 30, 34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 36, 34, 27], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.b2a_hex(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\n\n\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    \"\"\"\n    Searches for files within the specified directory matching a given regex pattern\n    and computes a SHA256 hash of each file's content.\n\n    Parameters:\n    - directory (str): Directory to search for files.\n    - pattern (str): Regex pattern that filenames must match. Default pattern matches 'AcroTray.exe'.\n\n    Returns:\n    - dict: A dictionary with file paths as keys and their SHA256 hashes as values.\n\n    Requirements:\n    - re\n    - hashlib\n    - binascii\n\n    Example:\n    >>> task_func(OUTPUT_DIR)\n    {}\n    \"\"\"\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).hexdigest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes", "compilation_passed": true, "time": 0.001817941665649414, "tests_passed": false, "error": "TypeError"}}
