{"selected_lines": [38, 40, 36, 31, 33, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0008869171142578125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 39, 31, 34, 32, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006060600280761719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005629062652587891, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 38, 36, 32, 37, 39, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) > 1:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 36, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005688667297363281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 35, 31, 33, 39, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 34, 33, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006468296051025391, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 37, 39, 40, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000560760498046875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 36, 38, 34, 40, 33, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005476474761962891, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005867481231689453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 31, 35, 40, 33, 39, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 40, 37, 32, 36, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006308555603027344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 39, 32, 38, 40, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 31, 40, 39, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 38, 36, 39, 37, 40, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 35, 40, 32, 36, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0008151531219482422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005950927734375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002177000045776367, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005741119384765625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 32, 39, 33, 31, 35, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018029212951660156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 39, 33, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 32, 31, 37, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0007560253143310547, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 38, 39, 40, 35, 37, 32, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000659942626953125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 32, 38, 33, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000579833984375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 40, 32, 31, 35, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005497932434082031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 37, 38, 34, 33, 35, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005471706390380859, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0007150173187255859, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 40, 33, 39, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 37, 40, 38, 34, 36, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005691051483154297, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 32, 40, 39, 31, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006201267242431641, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 31, 37, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000598907470703125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 39, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 32, 35, 36, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 40, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 40, 34, 39, 33, 32, 37, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016770362854003906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 32, 33, 35, 34, 38, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 36, 32, 34, 35, 39, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 40, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006191730499267578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00054931640625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 37, 40, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 31, 39, 37, 33, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 40, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 39, 35, 40, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 40, 32, 38, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 40, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 32, 37, 31, 35, 34, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 33, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 33, 39, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005998611450195312, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 37, 33, 34, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 31, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 40, 35, 39, 37, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 34, 32, 39, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005619525909423828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 33, 34, 32, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005619525909423828, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 31, 37, 33, 35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 40, 39, 38, 33, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006110668182373047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 38, 31, 37, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 35, 39, 38, 34, 36, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005557537078857422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005300045013427734, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 36, 40, 34, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005438327789306641, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000579833984375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005619525909423828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 40, 31, 36, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.014300107955932617, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 35, 37, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006110668182373047, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005619525909423828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016341209411621094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 33, 34, 32, 35, 37, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005369186401367188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 31, 34, 37, 40, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005381107330322266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005517005920410156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005960464477539062, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33, 37, 40, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 37, 31, 34, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35, 31, 32, 39, 36, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005900859832763672, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 31, 33, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 40, 35, 38, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005598068237304688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005602836608886719, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006062984466552734, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 33, 37, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0015690326690673828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005688667297363281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 31, 32, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005369186401367188, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 40, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005331039428710938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 35, 31, 32, 40, 37, 39, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005412101745605469, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 34, 32, 38, 36, 39, 35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0009539127349853516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 39, 31, 35, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005650520324707031, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 32, 31, 40, 39, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 35, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 33, 38, 31, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 37, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 38, 32, 37, 40, 35, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005438327789306641, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 36, 32, 34, 35, 37, 38, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005981922149658203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 35, 37, 38, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 35, 31, 40, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005331039428710938, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36, 35, 32, 38, 31, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.001741170883178711, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 36, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 40, 35, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 38, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 40, 38, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006117820739746094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 38, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 33, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005581378936767578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 38, 34, 32, 40, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 36, 32, 35, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 33, 37, 38, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005328655242919922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 35, 39, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005459785461425781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006117820739746094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 38, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005507469177246094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 36, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005362033843994141, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 33, 38, 36, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0007860660552978516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 38, 31, 34, 37, 33, 40, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005838871002197266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 35, 36, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006060600280761719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 40, 37, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005509853363037109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 32, 35, 31, 37, 33, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000579833984375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018291473388671875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 31, 33, 40, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 39, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005466938018798828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 36, 32, 39, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006809234619140625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 37, 40, 33, 39, 36, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005631446838378906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005631446838378906, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.008778095245361328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017311573028564453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 36, 33, 37, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016350746154785156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 35, 38, 37, 31, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 39, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 37, 34, 32, 31, 33, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005617141723632812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 39, 34, 37, 40, 36, 35, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) > 0:\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 39, 37, 33, 31, 38, 36, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005629062652587891, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005397796630859375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 38, 37, 35, 32, 33, 31, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005588531494140625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not patterns:\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 33, 36, 35, 39, 34, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 33, 31, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006029605865478516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 38, 31, 40, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005533695220947266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 34, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 39, 40, 31, 36, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005388259887695312, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 38, 32, 39, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005466938018798828, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 35, 40, 37, 31, 34, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 40, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005960464477539062, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 39, 37, 35, 40, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 31, 38, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 40, 37, 31, 35, 33, 36, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 39, 34, 33, 35, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005648136138916016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006170272827148438, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 31, 33, 32, 39, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 35, 38, 32, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 35, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 36, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006039142608642578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 39, 32, 34, 31, 37, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 38, 35, 36, 32, 39, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 40, 35, 38, 31, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 37, 35, 32, 31, 38, 36, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 39, 37, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005397796630859375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005910396575927734, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.009168863296508789, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [32, 33, 38, 39, 31, 34, 37, 36, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005497932434082031, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39, 34, 35, 38, 37, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006647109985351562, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 34, 33, 31, 39, 40, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 36, 34, 35, 32, 38, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005571842193603516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 39, 32, 38, 37, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 35, 36, 37, 38, 32, 40, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 39, 34, 36, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 35, 39, 34, 37, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 40, 33, 38, 36, 34, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005357265472412109, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 33, 34, 36, 38, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005412101745605469, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 38, 33, 37, 36, 31, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005631446838378906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 39, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0009257793426513672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 38, 36, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006299018859863281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31, 33, 32, 39, 40, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 40, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 34, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000560760498046875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 36, 37, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 37, 34, 32, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00055694580078125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018029212951660156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 40, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 39, 35, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006058216094970703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33, 32, 39, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006070137023925781, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005691051483154297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016942024230957031, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005447864532470703, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016448497772216797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 36, 40, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005249977111816406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 36, 32, 35, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 40, 36, 38, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006127357482910156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 40, 36, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 33, 37, 39, 35, 31, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.014300107955932617, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017571449279785156, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 32, 37, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 34, 33, 36, 39, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005388259887695312, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 35, 34, 32, 39, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005497932434082031, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 35, 34, 38, 40, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005998611450195312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 40, 31, 36, 34, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 31, 38, 32, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005731582641601562, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00893092155456543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 36, 33, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 36, 35, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005407333374023438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 38, 35, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 36, 31, 33, 38, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 39, 38, 36, 33, 37, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005991458892822266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 37, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 40, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 39, 37, 40, 31, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005278587341308594, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 39, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005571842193603516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 40, 39, 32, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005259513854980469, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 33, 32, 36, 37, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016448497772216797, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.007502079010009766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 31, 35, 36, 32, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005769729614257812, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 35, 40, 37, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005910396575927734, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 33, 37, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 34, 39, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33, 32, 37, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005629062652587891, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 32, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00061798095703125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 31, 37, 32, 33, 34, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 31, 38, 33, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017311573028564453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 40, 38, 37, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005393028259277344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 31, 40, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 32, 35, 31, 36, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005507469177246094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 39, 40, 33, 38, 34, 37, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005388259887695312, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006048679351806641, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 34, 31, 32, 39, 37, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005500316619873047, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 39, 37, 38, 35, 31, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 32, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 38, 32, 33, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005381107330322266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 40, 38, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 32, 35, 36, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005390644073486328, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37, 31, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000598907470703125, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00893092155456543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 37, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 39, 32, 33, 38, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36, 34, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 31, 37, 39, 36, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 35, 37, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 34, 32, 36, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005471706390380859, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 31, 36, 33, 34, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 38, 33, 39, 32, 37, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 39, 38, 37, 35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 35, 40, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000598907470703125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 40, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 32, 33, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 36, 31, 35, 33, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 40, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005509853363037109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 31, 34, 39, 35, 36, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005631446838378906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006151199340820312, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 31, 32, 38, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 35, 31, 39, 38, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 40, 39, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005376338958740234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36, 32, 34, 40, 37, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 39, 40, 37, 31, 32, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005941390991210938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005688667297363281, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 39, 37, 36, 32, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 39, 36, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 39, 32, 35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 40, 37, 36, 31, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006659030914306641, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 33, 38, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 34, 32, 36, 37, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39, 35, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38, 34, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 37, 38, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 32, 31, 37, 35, 33, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 32, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005602836608886719, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 39, 35, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 37, 36, 35, 32, 31, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not patterns:\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 31, 35, 34, 33, 37, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005507469177246094, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36, 34, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 40, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00061798095703125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 33, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005588531494140625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36, 33, 34, 39, 35, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.007502079010009766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 40, 39, 36, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 35, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 38, 33, 32, 39, 36, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005402565002441406, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005469322204589844, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 39, 36, 34, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0007281303405761719, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 38, 32, 35, 39, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 38, 36, 37, 40, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 36, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 32, 40, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005457401275634766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 32, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005412101745605469, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 35, 32, 38, 33, 40, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 38, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005681514739990234, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.008668899536132812, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 34, 40, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005960464477539062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 36, 37, 31, 35, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006062984466552734, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39, 36, 32, 33, 34, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 39, 40, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018410682678222656, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016350746154785156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 39, 34, 36, 31, 38, 35, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00055694580078125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 32, 37, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006740093231201172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 40, 38, 36, 37, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 32, 34, 36, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 34, 38, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 31, 33, 32, 37, 38, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006041526794433594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005598068237304688, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 31, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006122589111328125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 36, 38, 35, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005397796630859375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017521381378173828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 32, 35, 36, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005390644073486328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005581378936767578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005929470062255859, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 35, 37, 40, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005598068237304688, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.001682281494140625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 40, 36, 35, 38, 37, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 34, 36, 37, 31, 35, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00055694580078125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 40, 38, 35, 36, 37, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 34, 33, 38, 39, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005650520324707031, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 38, 36, 35, 34, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 38, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005612373352050781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 40, 31, 35, 37, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005459785461425781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 36, 31, 33, 40, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006067752838134766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 33, 37, 38, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005328655242919922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 31, 40, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 39, 36, 40, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 38, 37, 40, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005412101745605469, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006151199340820312, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017151832580566406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 32, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005459785461425781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005369186401367188, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 34, 32, 40, 39, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005953311920166016, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 38, 39, 32, 36, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005466938018798828, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0015730857849121094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 35, 34, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005497932434082031, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 32, 39, 33, 40, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00055694580078125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 32, 38, 39, 40, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 39, 32, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 39, 31, 35, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 32, 38, 35, 40, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005888938903808594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 33, 32, 35, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 40, 37, 38, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 37, 34, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 37, 38, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006420612335205078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39, 37, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005712509155273438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 38, 39, 40, 35, 37, 32, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000659942626953125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 38, 32, 31, 35, 37, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 37, 39, 36, 32, 35, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 33, 35, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016350746154785156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 36, 34, 40, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006289482116699219, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00893092155456543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 39, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005517005920410156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 39, 34, 35, 33, 36, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005331039428710938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 33, 31, 34, 37, 40, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005500316619873047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39, 34, 40, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005929470062255859, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016448497772216797, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 31, 38, 40, 36, 37, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 37, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00057220458984375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 37, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006110668182373047, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 37, 31, 34, 40, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005447864532470703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 38, 32, 37, 40, 35, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 38, 34, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 40, 34, 35, 38, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005629062652587891, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 32, 33, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 33, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005681514739990234, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 36, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005357265472412109, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.008703947067260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 33, 34, 35, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005960464477539062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 40, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0009009838104248047, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 40, 35, 32, 33, 37, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 40, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017802715301513672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005788803100585938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 31, 34, 39, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 36, 40, 35, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005600452423095703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 31, 40, 35, 34, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005469322204589844, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 32, 33, 39, 36, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 40, 38, 37, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00893092155456543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 35, 40, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016560554504394531, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 40, 36, 32, 37, 33, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005922317504882812, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 32, 37, 34, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005621910095214844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005671977996826172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 38, 40, 39, 31, 36, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005750656127929688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0021979808807373047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 40, 38, 32, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005469322204589844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 35, 40, 32, 33, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 38, 36, 31, 39, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 33, 34, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017802715301513672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 32, 31, 35, 37, 39, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017311573028564453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 39, 33, 36, 38, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 35, 37, 36, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 39, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 31, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006058216094970703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 34, 40, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 40, 32, 38, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 39, 38, 35, 32, 36, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005540847778320312, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 36, 31, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005476474761962891, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 40, 39, 37, 35, 33, 34, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005497932434082031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 34, 38, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 34, 33, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006110668182373047, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005600452423095703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 38, 40, 39, 37, 34, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005567073822021484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 32, 35, 40, 31, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005388259887695312, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 40, 38, 35, 36, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005340576171875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018498897552490234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 35, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005598068237304688, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 32, 33, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006108283996582031, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 31, 32, 34, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005390644073486328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017788410186767578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 32, 39, 38, 40, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 33, 34, 36, 35, 31, 37, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 40, 32, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005457401275634766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005369186401367188, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016448497772216797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006000995635986328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 40, 35, 31, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 37, 33, 38, 39, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005588531494140625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005381107330322266, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 32, 37, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 36, 31, 33, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 40, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005578994750976562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 39, 37, 35, 32, 38, 40, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005362033843994141, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 39, 32, 36, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 31, 36, 33, 38, 35, 32, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006499290466308594, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 37, 38, 34, 33, 35, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005471706390380859, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 36, 38, 35, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000560760498046875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 38, 33, 39, 37, 32, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 35, 33, 37, 38, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005328655242919922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 36, 39, 37, 31, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 33, 32, 31, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 34, 40, 31, 36, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 32, 36, 37, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005381107330322266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 33, 34, 38, 39, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005557537078857422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 40, 33, 35, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006201267242431641, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 34, 32, 39, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005791187286376953, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 36, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005309581756591797, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 38, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 35, 32, 36, 38, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005619525909423828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 32, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005602836608886719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005929470062255859, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 32, 33, 34, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005598068237304688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 38, 32, 39, 33, 35, 36, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 35, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37, 35, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005509853363037109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 38, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017788410186767578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005698204040527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 33, 36, 32, 34, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 40, 39, 35, 31, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005929470062255859, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 32, 34, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005810260772705078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 39, 36, 33, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 35, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017881393432617188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 40, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 32, 31, 34, 33, 39, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 31, 34, 36, 40, 39, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33, 37, 35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 38, 34, 40, 36, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 38, 33, 35, 37, 39, 32, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 36, 37, 33, 34, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 38, 31, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 34, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006320476531982422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00054931640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 40, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005731582641601562, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 34, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005702972412109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 38, 37, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006048679351806641, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 39, 36, 32, 31, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.008703947067260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 35, 33, 37, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005466938018798828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 31, 34, 39, 36, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 31, 40, 39, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 35, 34, 33, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 31, 39, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005497932434082031, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005476474761962891, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 39, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0009090900421142578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005648136138916016, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 31, 32, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 39, 31, 37, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 40, 34, 38, 31, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005991458892822266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 38, 36, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 37, 35, 32, 31, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 35, 31, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006148815155029297, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 34, 37, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005469322204589844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 37, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 40, 37, 38, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 38, 33, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37, 36, 40, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005352497100830078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 35, 38, 37, 33, 39, 31, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 32, 39, 33, 40, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006120204925537109, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017571449279785156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 34, 39, 35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) > 0:\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017881393432617188, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 31, 33, 32, 38, 40, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005390644073486328, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005471706390380859, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 32, 36, 38, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006289482116699219, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 36, 32, 33, 39, 38, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005900859832763672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006062984466552734, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 39, 37, 38, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 32, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33, 35, 37, 32, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005557537078857422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 33, 31, 32, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005509853363037109, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 36, 31, 33, 40, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006067752838134766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 39, 34, 40, 31, 37, 36, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005588531494140625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 40, 31, 37, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 36, 37, 34, 38, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005991458892822266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 34, 32, 38, 33, 36, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 39, 37, 40, 38, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 37, 36, 35, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 31, 33, 40, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005598068237304688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 38, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 37, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005571842193603516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37, 33, 31, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002177000045776367, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 35, 34, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005497932434082031, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 38, 31, 34, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005421638488769531, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016472339630126953, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005600452423095703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005619525909423828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018410682678222656, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 31, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 38, 31, 39, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005891323089599609, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005369186401367188, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39, 38, 40, 35, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 32, 39, 37, 31, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 39, 36, 31, 35, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000560760498046875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 36, 31, 38, 33, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005459785461425781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 31, 36, 39, 33, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 40, 36, 38, 34, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005412101745605469, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 35, 32, 36, 40, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006010532379150391, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 36, 37, 38, 34, 39, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005521774291992188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016560554504394531, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.001619100570678711, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 40, 31, 32, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 31, 40, 36, 39, 32, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 39, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 36, 40, 31, 33, 34, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 31, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005381107330322266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 39, 35, 33, 38, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40, 34, 32, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018029212951660156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 40, 37, 33, 35, 39, 32, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 35, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006010532379150391, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 33, 34, 37, 38, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005402565002441406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 31, 34, 36, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005469322204589844, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 32, 39, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 37, 33, 36, 32, 35, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 40, 38, 35, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005600452423095703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 31, 37, 34, 36, 35, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005970001220703125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018029212951660156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005650520324707031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 32, 33, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 35, 40, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 39, 40, 38, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005629062652587891, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016560554504394531, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 40, 39, 38, 33, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006110668182373047, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018410682678222656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 32, 31, 39, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005970001220703125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 38, 36, 37, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 32, 40, 36, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005471706390380859, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 32, 40, 37, 39, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005321502685546875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 39, 34, 35, 36, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006210803985595703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 39, 31, 32, 40, 36, 38, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006010532379150391, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005397796630859375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 36, 32, 37, 38, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005528926849365234, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 33, 37, 38, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005328655242919922, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 35, 32, 33, 38, 40, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 38, 34, 39, 32, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018668174743652344, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017349720001220703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 39, 34, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005509853363037109, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 33, 36, 38, 31, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005588531494140625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005407333374023438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 31, 37, 35, 33, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 31, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0009119510650634766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005588531494140625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 35, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 36, 40, 33, 31, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005557537078857422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 39, 38, 37, 40, 31, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017151832580566406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017788410186767578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 33, 37, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 40, 33, 35, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002403736114501953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 33, 36, 32, 34, 37, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'string must be a str, but you gave a {type(string)}')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006031990051269531, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 34, 40, 33, 37, 36, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 38, 40, 34, 39, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 37, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 37, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 36, 33, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 38, 35, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 31, 39, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017571449279785156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 39, 31, 32, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006101131439208984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 39, 33, 37, 35, 36, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 31, 37, 33, 39, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(r\"(\" + \"|\".join(patterns) + r\")\", string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005970001220703125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 40, 33, 39, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017788410186767578, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 32, 38, 33, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005397796630859375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005376338958740234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 38, 40, 33, 37, 35, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006420612335205078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 31, 32, 35, 37, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.000553131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34, 36, 32, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005567073822021484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 37, 40, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(patterns) > 1:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 31, 34, 38, 32, 37, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 31, 33, 32, 34, 38, 36, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005412101745605469, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 39, 35, 37, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005960464477539062, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016942024230957031, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 39, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 35, 38, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns should be of type str.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0015730857849121094, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 37, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006461143493652344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005619525909423828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 39, 35, 32, 33, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0016350746154785156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 31, 38, 32, 36, 40, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005402565002441406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 36, 35, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005393028259277344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 37, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005571842193603516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.001974821090698242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 35, 33, 34, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005421638488769531, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005340576171875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 37, 40, 36, 39, 31, 34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005447864532470703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 38, 40, 35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005331039428710938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005402565002441406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 35, 31, 36, 33, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005970001220703125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 38, 31, 32, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 32, 35, 36, 31, 34, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if len(patterns) > 0:\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 38, 40, 36, 39, 35, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017940998077392578, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 35, 38, 34, 33, 37, 40, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005571842193603516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) > 1:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002177000045776367, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 33, 35, 39, 38, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005681514739990234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 31, 38, 39, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 34, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 33, 38, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 39, 38, 31, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005350112915039062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 33, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 36, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006721019744873047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 35, 36, 39, 33, 34, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 32, 34, 39, 35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005631446838378906, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 32, 37, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006000995635986328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 34, 35, 40, 32, 33, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005571842193603516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 35, 31, 34, 39, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 37, 34, 33, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 39, 38, 36, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each element of patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 31, 40, 38, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) is not str:\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 32, 40, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006198883056640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 39, 36, 37, 34, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 40, 31, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 40, 37, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005612373352050781, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018029212951660156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 38, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 34, 39, 35, 36, 37, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005459785461425781, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0018668174743652344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 32, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 33, 34, 36, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All elements in patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005459785461425781, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 37, 33, 40, 34, 31, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005407333374023438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 39, 40, 38, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 32, 40, 31, 36, 33, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005571842193603516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005910396575927734, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.00174713134765625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 40, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005369186401367188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 40, 36, 35, 39, 31, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 32, 40, 37, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 32, 37, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 33, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00054931640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 39, 31, 34, 35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.002040863037109375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 37, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005457401275634766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006699562072753906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 39, 34, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006139278411865234, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 36, 35, 40, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should contain only strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r\"(?<={pattern})({pattern})\".format(pattern=pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005381107330322266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 40, 34, 37, 35, 38, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 33, 34, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 40, 34, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 32, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005428791046142578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a str')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005390644073486328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 31, 35, 36, 40, 34, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in the list must be a string.\")\n    pattern_counts = collections.Counter(re.findall(\"|\".join(patterns), string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0021979808807373047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 40, 35, 34, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0009238719940185547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37, 32, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0015690326690673828, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 31, 37, 35, 40, 38, 32, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be passed as a list of strings.\")\n    if len(string) < len(patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 40, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0009009838104248047, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0077168941497802734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0016751289367675781, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 40, 34, 37, 33, 39, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(p, str) for p in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 32, 38, 37, 34, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('String should be of type str')\n    if not isinstance(patterns, list) or any(not isinstance(p, str) for p in patterns):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005631446838378906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 40, 33, 32, 39, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string is not a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 31, 38, 32, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError('The input string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 31, 39, 33, 37, 32, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(r'\\b{}\\b'.format(pattern), string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 37, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005478858947753906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 40, 39, 38, 33, 32, 31, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"Input string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 33, 37, 34, 36, 32, 40, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31, 38, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0015730857849121094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not patterns:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 35, 33, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005598068237304688, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 38, 36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005767345428466797, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = {}\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005397796630859375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 35, 39, 32, 40, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005650520324707031, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 34, 33, 35, 37, 40, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005402565002441406, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005929470062255859, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005650520324707031, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 38, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('The input string must be a string.')\n    if not isinstance(patterns, collections.abc.Iterable):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0006020069122314453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 31, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.00054931640625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list) or any(not isinstance(pat, str) for pat in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 31, 37, 38], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum(1 for match in re.finditer(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 31, 38, 37, 34, 39], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if len(patterns) == 0:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 38, 32, 36, 31, 33, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected string to be a string, but received {}\".format(type(string).__name__))\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"All elements of patterns list should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = sum([len(match) == len(pattern) and string.startswith(pattern) for match in re.finditer(pattern, string)])\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string must be a str\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005929470062255859, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005643367767333984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 39, 33, 37, 31, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list) or not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Patterns should be a list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005609989166259766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 38, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if len(patterns) != 5:\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 39, 36, 34, 38, 37, 33, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list) or any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"Each pattern in patterns must be a string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005500316619873047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 32, 40, 31, 38, 33, 35, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string is not a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 32, 40, 39, 37], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(f'Invalid input. string must be a string, got: {type(string)}')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0006198883056640625, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 38, 32, 40, 39, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"string should be a str object\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005567073822021484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 32, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String should be a string!\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be a list of strings.\")\n    if any(not isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005998611450195312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 40, 38, 39, 34, 37, 32, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(patterns, list):\n        raise TypeError(\"String should be a string\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Input patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 40, 31, 39, 35], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"string must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005490779876708984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005719661712646484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 40, 39, 37, 34, 35, 31], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"Patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter(re.findall(pattern, string))\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 39, 37, 36, 34], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('string must be a string')\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be of type list.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"All patterns should be of type string.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return dict(pattern_counts)", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 31, 39, 40], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.defaultdict(int)\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 34, 37, 35, 31, 32], "result": {"code": "import re\nimport collections\n\n\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n    \"\"\"\n    Counts the occurrence of specific patterns in a string.\n    \n    Parameters:\n    string (str): The input string.\n    patterns (list[str], optional): List of patterns to search for. Defaults to ['nnn', 'aaa', 'sss', 'ddd', 'fff'].\n    \n    Returns:\n    dict: A dictionary with patterns as keys and their counts as values.\n\n    Raises:\n    - TypeError: If string is not a str.\n    - TypeError: If patterns is not a list of str.\n    \n    Requirements:\n    - re\n    - collections\n    \n    Example:\n    >>> task_func(\"nnnaaaasssdddeeefffggg\")\n    {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n    >>> task_func('asdfasdfasdfasdaaaaf', patterns=['a', 'asdf'])\n    {'a': 8, 'asdf': 3}\n    >>> task_func('123kajhdlkfah12345k,jk123', patterns=['123', '1234'])\n    {'123': 3, '1234': 1}\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"String input must be a string.\")\n    if not isinstance(patterns, list):\n        raise TypeError(\"List of patterns should be of type list.\")\n    if not all(isinstance(pattern, str) for pattern in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n    pattern_counts = collections.Counter()\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n    return pattern_counts", "compilation_passed": true, "time": 0.0005462169647216797, "tests_passed": true, "error": null}}
