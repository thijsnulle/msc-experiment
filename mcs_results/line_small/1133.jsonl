{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 34, 30, 35, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0032927989959716797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0031540393829345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 33, 34, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002874135971069336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028526782989501953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 31, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028100013732910156, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32, 33, 29, 31, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002711772918701172, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007032871246337891, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31, 30, 32, 34, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0029439926147460938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031769275665283203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 37, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002877950668334961, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026907920837402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 29, 35, 30, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002683877944946289, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002741098403930664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028018951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008023977279663086, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007533073425292969, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0070400238037109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 30, 34, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030667781829833984, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007222890853881836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008010149002075195, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 33, 30, 31, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028710365295410156, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 30, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026988983154296875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028312206268310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 34, 33, 35, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002804994583129883, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37, 31, 34, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except Exception as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028018951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002827167510986328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 31, 29, 37, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028607845306396484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030548572540283203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 37, 35, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002891063690185547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027692317962646484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0028438568115234375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027599334716796875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0070400238037109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002886056900024414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028617382049560547, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 29, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027730464935302734, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 30, 33, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003058195114135742, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30, 36, 37, 29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 29, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002819061279296875, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.006891012191772461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027921199798583984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.011588096618652344, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 30, 31, 34, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028400421142578125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 30, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34, 29, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002696990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 32, 34, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 32, 31, 29, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002716064453125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007009029388427734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003153085708618164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 36, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 35, 30, 32, 29, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026979446411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028009414672851562, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 37, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002783060073852539, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 33, 31, 34, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028939247131347656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 33, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002919912338256836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 29, 36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003282785415649414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 35, 37, 30, 32, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 29, 33, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002962827682495117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 33, 30, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028836727142333984, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00886225700378418, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027780532836914062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 36, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027930736541748047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027132034301757812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002817869186401367, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 32, 30, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027229785919189453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 35, 31, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.003178834915161133, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002671957015991211, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 36, 37, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028328895568847656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 37, 36, 29, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002724885940551758, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 30, 31, 35, 29, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.RequestException:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002825021743774414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027589797973632812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031769275665283203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027132034301757812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 34, 35, 31, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002785205841064453, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003032207489013672, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0072021484375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 35, 30, 37, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027840137481689453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027761459350585938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027549266815185547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 37, 29, 36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002754688262939453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 30, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 36, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002802133560180664, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 30, 34, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 29, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030362606048583984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002804994583129883, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027151107788085938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 31, 33, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 37, 30, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028297901153564453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027740001678466797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007585048675537109, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 29, 35, 30, 34, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 31, 37, 33, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 30, 29, 34, 33, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002743959426879883, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 35, 30, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027709007263183594, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 31, 34, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003116607666015625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 34, 37, 32, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002714872360229492, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 33, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027892589569091797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027472972869873047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002791881561279297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002711057662963867, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 29, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002850055694580078, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32, 31, 29, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027251243591308594, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 36, 37, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003153085708618164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027780532836914062, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 33, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002742767333984375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 31, 37, 35, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 29, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 35, 30, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 29, 37, 35, 33, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002780914306640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002792835235595703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030159950256347656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 37, 29, 30, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028929710388183594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 31, 36, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0032799243927001953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 31, 34, 35, 30, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 31, 34, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028929710388183594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027740001678466797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 31, 34, 30, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027358531951904297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 30, 37, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002785921096801758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 29, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002839803695678711, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002672910690307617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 34, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027801990509033203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007380962371826172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00844120979309082, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 35, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002748250961303711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30, 35, 37, 34, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002758026123046875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 31, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.011588096618652344, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002768993377685547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007974863052368164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027060508728027344, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008023977279663086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 36, 32, 29, 30, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00886225700378418, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002816915512084961, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37, 31, 32, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030431747436523438, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 29, 37, 31, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002833127975463867, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 29, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027289390563964844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 37, 32, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026721954345703125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002804994583129883, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007700920104980469, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030548572540283203, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 30, 29, 37, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002862215042114258, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007907867431640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027022361755371094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002804994583129883, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 37, 31, 36, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030770301818847656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 33, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002721071243286133, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007533073425292969, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 33, 37, 35, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027570724487304688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008078813552856445, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003032207489013672, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 29, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028128623962402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00281524658203125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007907867431640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 37, 30, 33, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027480125427246094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002680063247680664, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031909942626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002710103988647461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002769947052001953, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007385969161987305, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 29, 31, 35, 32, 36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027239322662353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002847909927368164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027251243591308594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002733945846557617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003110170364379883, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002772808074951172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 32, 37, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002783060073852539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 31, 33, 29, 36, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027379989624023438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 31, 35, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 36, 34, 29, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028259754180908203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 29, 30, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002878904342651367, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 29, 32, 37, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0029439926147460938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 32, 29, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002892017364501953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 30, 31, 33, 34, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003264904022216797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002733945846557617, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008427143096923828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 30, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 37, 36, 32, 29, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002772092819213867, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 36, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002802133560180664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028581619262695312, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 33, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError from e\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002683877944946289, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 34, 32, 30, 37, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 35, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002841949462890625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 34, 37, 35, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028350353240966797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027573108673095703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002750873565673828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 35, 30, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.003011941909790039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 29, 36, 35, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028176307678222656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002701997756958008, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 37, 30, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002794027328491211, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027472972869873047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027790069580078125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027191638946533203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 32, 31, 37, 30, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028450489044189453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 35, 37, 34, 31, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0030219554901123047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 29, 34, 31, 36, 30, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002763032913208008, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007385969161987305, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31, 30, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028142929077148438, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 31, 33, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027589797973632812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027878284454345703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 36, 31, 34, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002807140350341797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027227401733398438, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0072021484375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29, 34, 32, 35, 37, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003083944320678711, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 37, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027379989624023438, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002771139144897461, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007385969161987305, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027701854705810547, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007665157318115234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 36, 33, 29, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0028078556060791016, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 35, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027167797088623047, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 31, 32, 36, 35, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0030808448791503906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 29, 32, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027909278869628906, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 29, 30, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003098726272583008, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008307933807373047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 32, 37, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.00275421142578125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028879642486572266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002788066864013672, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 35, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028688907623291016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 30, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028443336486816406, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 31, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027828216552734375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33, 34, 32, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0031380653381347656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027048587799072266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028200149536132812, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 37, 30, 35, 31, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007222890853881836, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 36, 34, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002744913101196289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36, 29, 31, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 37, 35, 33, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030548572540283203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028090476989746094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 37, 29, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002889871597290039, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 34, 30, 35, 33, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002975940704345703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 36, 30, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002955198287963867, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.003178119659423828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 36, 37, 34, 33, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002791881561279297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0074808597564697266, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008307933807373047, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008994102478027344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 29, 37, 30, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028057098388671875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 32, 34, 33, 37, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 34, 30, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027151107788085938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008339881896972656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 32, 30, 37, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028820037841796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002886056900024414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002771139144897461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007009029388427734, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002714872360229492, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 33, 35, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002780914306640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003081798553466797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 30, 35, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 33, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028607845306396484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 33, 31, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027761459350585938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 37, 30, 32, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028259754180908203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026369094848632812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 36, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 37, 34, 35, 29, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002850055694580078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 33, 30, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 29, 32, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027909278869628906, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008010149002075195, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002719879150390625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 33, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027611255645751953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 30, 31, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0030651092529296875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29, 32, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027420520782470703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 36, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 36, 29, 37, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00888514518737793, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 36, 33, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028090476989746094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 31, 34, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002747774124145508, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 29, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027980804443359375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 33, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027818679809570312, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 35, 37, 36, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 37, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0032138824462890625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36, 35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027010440826416016, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.011588096618652344, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 32, 30, 35, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027849674224853516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 34, 35, 31, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0026988983154296875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 36, 33, 34, 37, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002838134765625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 37, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002710103988647461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 36, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002756834030151367, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 34, 29, 30, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031371116638183594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 29, 34, 30, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027701854705810547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 35, 33, 30, 36, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002791166305541992, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 30, 36, 29, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027539730072021484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027468204498291016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 30, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026721954345703125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 30, 35, 33, 32, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027608871459960938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002775907516479492, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002682209014892578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 37, 29, 34, 31, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()  # Deserializes JSON response\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003139019012451172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027000904083251953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002808094024658203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008994102478027344, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007533073425292969, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 34, 35, 32, 33, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002817869186401367, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 33, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002721071243286133, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 36, 35, 29, 34, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028891563415527344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 29, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029268264770507812, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 33, 29, 30, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 35, 31, 29, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33, 35, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0029020309448242188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0074808597564697266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 32, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 37, 29, 35, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029540061950683594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 29, 32, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.003103971481323242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 29, 37, 30, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002794027328491211, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007009029388427734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 35, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002841949462890625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028200149536132812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 35, 37, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027430057525634766, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027191638946533203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 29, 31, 37, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002821207046508789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027298927307128906, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002743959426879883, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007786750793457031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 37, 31, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027108192443847656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002821683883666992, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00304412841796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 37, 35, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 35, 30, 34, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027849674224853516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008424043655395508, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027167797088623047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 31, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 30, 37, 32, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028197765350341797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 37, 35, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027399063110351562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.007276058197021484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002817869186401367, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002804994583129883, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0070400238037109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 36, 37, 31, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 36, 35, 32, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002785205841064453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002777099609375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 32, 34, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007032871246337891, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 35, 36, 31, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026941299438476562, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 29, 34, 33, 35, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002808094024658203, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 35, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002841949462890625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031180381774902344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 36, 34, 30, 29, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027251243591308594, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027997493743896484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 34, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError from e\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027489662170410156, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 34, 33, 35, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002826690673828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027179718017578125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 37, 35, 32, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002810955047607422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 37, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0026807785034179688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0031707286834716797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027282238006591797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 35, 33, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028362274169921875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007928133010864258, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 35, 29, 36, 37, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008233308792114258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027849674224853516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027751922607421875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 37, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027959346771240234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 29, 31, 30, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027420520782470703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 32, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0031518936157226562, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008307933807373047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031180381774902344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37, 31, 36, 35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002748727798461914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 30, 31, 37, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002797842025756836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007533073425292969, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.010655879974365234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00273895263671875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 32, 30, 37, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028820037841796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 30, 32, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002813100814819336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027031898498535156, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 36, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007336139678955078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030548572540283203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028150081634521484, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027408599853515625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 35, 32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030739307403564453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 34, 31, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027909278869628906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 35, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 34, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.00273895263671875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008339881896972656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029702186584472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 33, 29, 35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028939247131347656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007700920104980469, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0029480457305908203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007585048675537109, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002908945083618164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 37, 34, 32, 29, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028307437896728516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002817869186401367, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 36, 30, 37, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.006891012191772461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003062725067138672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36, 33, 31, 35, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027971267700195312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 29, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028429031372070312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 31, 30, 35, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 36, 35, 30, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002682209014892578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 37, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028221607208251953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 32, 29, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 33, 31, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002820253372192383, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008427143096923828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 37, 36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0030400753021240234, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 35, 36, 34, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027098655700683594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 33, 30, 35, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027849674224853516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 32, 29, 36, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027518272399902344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028181076049804688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028200149536132812, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002763032913208008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 29, 37, 30, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002794027328491211, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 34, 37, 32, 30, 36, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028128623962402344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 31, 33, 30, 32, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0026979446411132812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 36, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0032258033752441406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 37, 34, 29, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027458667755126953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 36, 37, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0028159618377685547, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007533073425292969, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 33, 36, 29, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027408599853515625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028069019317626953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33, 30, 37, 35, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except Exception as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027823448181152344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002719402313232422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027132034301757812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 32, 30, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003147125244140625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()  # Deserializes JSON response\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027608871459960938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 30, 37, 35, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002811908721923828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 36, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 36, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027778148651123047, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 37, 34, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028100013732910156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007222890853881836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027670860290527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 34, 33, 30, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002862215042114258, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 35, 36, 33, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002763986587524414, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 36, 35, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0032739639282226562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007559061050415039, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 34, 35, 29, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 37, 31, 36, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030770301818847656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 35, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002841949462890625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002769947052001953, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 32, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 30, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002769947052001953, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 32, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002866983413696289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 37, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34, 32, 37, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028378963470458984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 37, 36, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027751922607421875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008332967758178711, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 35, 36, 32, 34, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028378963470458984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 32, 29, 36, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029387474060058594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002710103988647461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 30, 29, 33, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002820253372192383, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 31, 33, 35, 32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030362606048583984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00888514518737793, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002759218215942383, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 35, 29, 33, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002795696258544922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007974863052368164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 33, 37, 32, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002991199493408203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 29, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002895832061767578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 34, 30, 32, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029659271240234375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 30, 33, 29, 34, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002869129180908203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 31, 36, 32, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 29, 33, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002871274948120117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 35, 34, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029931068420410156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 32, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028569698333740234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 29, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026831626892089844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 29, 31, 34, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028231143951416016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026369094848632812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027022361755371094, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 30, 33, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003058195114135742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 32, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002872943878173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 32, 34, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027267932891845703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026962757110595703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 31, 37, 30, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030050277709960938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 31, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.006918907165527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 34, 35, 31, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0026988983154296875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002716064453125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 32, 33, 31, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008078813552856445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 31, 32, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028100013732910156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 37, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 29, 36, 30, 34, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 31, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027370452880859375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0072021484375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027761459350585938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026369094848632812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 31, 37, 29, 32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002766132354736328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 37, 36, 35, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002810955047607422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 30, 36, 32, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028429031372070312, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 36, 37, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 36, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0032079219818115234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002765178680419922, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 29, 33, 34, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0072021484375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 37, 30, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002847909927368164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008233308792114258, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 33, 31, 37, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027861595153808594, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008994102478027344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 36, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 30, 37, 32, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.011588096618652344, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 34, 29, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.011588096618652344, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 34, 29, 36, 31, 37, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028951168060302734, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 31, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003032207489013672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 29, 37, 35, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Loads JSON data from a file\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028700828552246094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 34, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027408599853515625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32, 34, 29, 35, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003147125244140625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026810169219970703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027132034301757812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027761459350585938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 35, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002808094024658203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002694845199584961, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 30, 33, 32, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028188228607177734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 33, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027158260345458984, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007907867431640625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 35, 37, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028030872344970703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 37, 32, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 29, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026831626892089844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 37, 35, 36, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027589797973632812, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.003158092498779297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 35, 29, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002771139144897461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 37, 31, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027382373809814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027599334716796875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 30, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 34, 32, 36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.RequestException:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 30, 35, 31, 32, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027840137481689453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030221939086914062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002831697463989258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 32, 34, 36, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0028960704803466797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 30, 36, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029692649841308594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 30, 29, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028731822967529297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002933025360107422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 31, 29, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002788066864013672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 33, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002721071243286133, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 31, 35, 32, 36, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002710103988647461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002803802490234375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 34, 31, 37, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 29, 37, 36, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031540393829345703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002663850784301758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 31, 34, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027539730072021484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002711057662963867, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002772092819213867, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008307933807373047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002777099609375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008994102478027344, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008010149002075195, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030548572540283203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 37, 36, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0030400753021240234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 29, 32, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00273895263671875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 36, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0075190067291259766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002771139144897461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002763032913208008, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0031890869140625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 30, 36, 32, 31, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007921218872070312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026979446411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028412342071533203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 35, 32, 30, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 33, 36, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007336139678955078, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 37, 32, 29, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002792835235595703, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008427143096923828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 30, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027723312377929688, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008078813552856445, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 35, 32, 36, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027670860290527344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.003125905990600586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028018951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002802133560180664, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 32, 30, 37, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028820037841796875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 36, 35, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 31, 37, 30, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027430057525634766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026369094848632812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 37, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027570724487304688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 35, 32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33, 31, 35, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002691030502319336, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 34, 30, 36, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027871131896972656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 37, 36, 33, 34, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 36, 30, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 33, 31, 30, 37, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031681060791015625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 30, 36, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029692649841308594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002696990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028219223022460938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 30, 37, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002777099609375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008424043655395508, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 29, 34, 32, 33, 37, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026869773864746094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 36, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Deserializes JSON response\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027878284454345703, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007013797760009766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002817869186401367, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002724885940551758, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 30, 29, 32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002765178680419922, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.007806062698364258, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002833127975463867, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028879642486572266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030379295349121094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32, 35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027799606323242188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008339881896972656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002735137939453125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002672910690307617, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028107166290283203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 34, 35, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027730464935302734, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 34, 36, 33, 32, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 35, 29, 33, 37, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027091503143310547, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 31, 37, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027878284454345703, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007617950439453125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030019283294677734, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026369094848632812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029070377349853516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 37, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002908945083618164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 31, 30, 37, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002777099609375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007921218872070312, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 30, 33, 32, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002958059310913086, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 35, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.00287628173828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 32, 35, 34, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 31, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 30, 34, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 37, 32, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002994060516357422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028200149536132812, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 29, 31, 37, 35, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002783060073852539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026962757110595703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003032207489013672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 30, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027980804443359375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 37, 34, 31, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0030243396759033203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 31, 37, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027191638946533203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 37, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0026807785034179688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002711057662963867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 30, 34, 31, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027801990509033203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 30, 33, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 36, 31, 34, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except Exception as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027348995208740234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028748512268066406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 37, 36, 35, 33, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027990341186523438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.007276058197021484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 30, 37, 33, 34, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002713918685913086, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007470846176147461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 31, 29, 34, 37, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0028438568115234375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002724885940551758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.007806062698364258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30, 29, 31, 36, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 31, 29, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002767801284790039, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 31, 30, 33, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0031290054321289062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002716064453125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 32, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028731822967529297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 33, 30, 35, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 29, 36, 31, 34, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027709007263183594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027196407318115234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 29, 33, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002792835235595703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 37, 33, 36, 32, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30, 35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027000904083251953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002735137939453125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 34, 31, 30, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031249523162841797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027647018432617188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 36, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027828216552734375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 36, 32, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Loads JSON data from a file\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002779245376586914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028200149536132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 29, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026907920837402344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 29, 35, 37, 32, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028030872344970703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002712249755859375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 34, 37, 36, 31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0028002262115478516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0031158924102783203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 36, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0027570724487304688, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002803802490234375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 31, 33, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027370452880859375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027399063110351562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 31, 32, 37, 29, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002759218215942383, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002792835235595703, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.006891012191772461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 37, 32, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 29, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002763032913208008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 35, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = json.loads(response.text)\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 29, 34, 35, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027930736541748047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 29, 30, 33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002759218215942383, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 31, 29, 33, 30, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except (json.decoder.JSONDecodeError, requests.exceptions.RequestException) as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002767801284790039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 29, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029838085174560547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30, 31, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027620792388916016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008339881896972656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 30, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 37, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027399063110351562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 33, 37, 36, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027561187744140625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 32, 34, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 31, 32, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # Parses the JSON response into a Python object\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint.lower()}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002746105194091797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002817869186401367, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027298927307128906, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 36, 35, 34, 37, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f'Error fetching data from API: {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028259754180908203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 36, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029320716857910156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 30, 35, 34, 33, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002908945083618164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002866983413696289, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 37, 32, 36, 31, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 34, 32, 30, 37, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002991199493408203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 33, 30, 36, 34, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029692649841308594, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0029511451721191406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002853870391845703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 29, 30, 32, 31, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(e)\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028128623962402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 37, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(\"Failed to fetch data: {}\".format(str(e)))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002908945083618164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 29, 31, 36, 35, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL+endpoint, timeout=20)\n        response.raise_for_status()\n        data = response.json()  # Raises ValueError for invalid JSON\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002813100814819336, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 35, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0030100345611572266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 29, 35, 30, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002733945846557617, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36, 32, 34, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30, 31, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 32, 34, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 37, 35, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027229785919189453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002885103225708008, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f, indent=4, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 31, 34, 30, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027680397033691406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002816915512084961, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 37, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 30, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002774953842163086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.010655879974365234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2, sort_keys=True)\n    return filename", "compilation_passed": true, "time": 0.002704143524169922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007408857345581055, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 36, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except (json.JSONDecodeError, requests.HTTPError) as err:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028438568115234375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 31, 34, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")\n    filename = PREFIX + endpoint.replace('/', '.') + '.json'\n    with open(filename, 'w') as outfile:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.006918907165527344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 29, 37, 30, 35, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028057098388671875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 29, 36, 33, 32, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002753019332885742, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 34, 37, 29, 32, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0031278133392333984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 35, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Deserializes JSON response\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as outfile:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 30, 34, 36, 32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027818679809570312, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026900768280029297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint.split('/')[-1] + \".json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027761459350585938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 37, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint.split('/')[-1] + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00273895263671875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(\"Error fetching data from the API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027472972869873047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 37, 36, 31, 29, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027420520782470703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0031719207763671875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37, 29, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()  # JSON-decodes the response payload into a Python object\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0026962757110595703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 29, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027589797973632812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 37, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(e)\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027227401733398438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + \".json\"\n    with open(filename, 'w', encoding=\"utf-8\")\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003032207489013672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 34, 33, 32, 30, 35, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0028197765350341797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 37, 31, 30, 33, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f'Failed to fetch data from API endpoint: {endpoint} - {e}') from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002704143524169922, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.007306098937988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30, 36, 33, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0028238296508789062, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.002763986587524414, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL}. {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.008792877197265625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007533073425292969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 36, 30, 35, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Error fetching data from API: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.00791621208190918, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 32, 37, 35, 30, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()  # Parses the JSON response into a Python object\n    except requests.exceptions.HTTPError as e:\n        raise RuntimeError(\"Error fetching data from API: \" + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.003049135208129883, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37, 29, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError('Failed to fetch data: ' + str(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002788066864013672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007703065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 31, 35], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002682209014892578, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 37, 35, 32, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:  # A general exception used for all failed requests\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 33, 32, 29, 31, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0027370452880859375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007907867431640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException:  # Just in case\n        raise RuntimeError(f\"Error fetching data from {endpoint}: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002785921096801758, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007102251052856445, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 37, 32, 31, 33], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Request to {API_URL + endpoint} failed: {e}\") from e\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002852916717529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.007174253463745117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 36, 34], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}. {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 30], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=2)\n    return filename", "compilation_passed": true, "time": 0.0027990341186523438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 31], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32, 37, 33, 30, 31, 29], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.HTTPError as e:  # Handles HTTPError raised from get() call\n        raise RuntimeError(\"Error fetching data from the API: {}\".format(e))\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n    return filename", "compilation_passed": true, "time": 0.002782106399536133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 30, 36, 32], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.002741098403930664, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36, 34, 37], "result": {"code": "import json\nimport requests\n\ndef task_func(API_URL, endpoint, PREFIX):\n    \"\"\"\n    Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating \n    a provided prefix with the endpoint name, followed by '.json'.\n\n    Parameters:\n    - API_URL (str): The base URL of the API.\n    - endpoint (str): The specific API endpoint to retrieve data from.\n    - PREFIX (str): The prefix to prepend to the filename for the output JSON file.\n\n    Returns:\n    - str: The filename into which the JSON data was written.\n\n    Requirements:\n    - json\n    - requests\n\n    Raises:\n    - RuntimeError: If there is an error fetching data from the API or writing to the file.\n\n    Example:\n    >>> filename = task_func('https://api.github.com/', 'users', 'ME')\n    >>> print(filename)\n    'MEusers.json'\n    \"\"\"\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = json.loads(response.text)  # Convert the API response to a dictionary\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\n    return filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
