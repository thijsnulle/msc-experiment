{"selected_lines": [39, 36, 30, 31, 35, 38, 34, 43, 41, 42, 33, 40, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010029077529907227, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 37, 38, 43, 33, 39, 34, 42, 32, 41, 36, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 30, 41, 36, 34, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 42, 32, 33, 35, 30, 38, 37, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 40, 42, 39, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009515047073364258, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 38, 35, 39, 32, 30, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 33, 30, 42, 35, 40, 43, 37, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004081249237060547, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 31, 41, 33, 40, 42, 37, 35, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 39, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003055095672607422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 35, 40, 37, 36, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 31, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010825157165527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 42, 37, 32, 34, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003990888595581055, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010901927947998047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 43, 34, 30, 37, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003152132034301758, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 31, 42, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029752254486083984, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 32, 37, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 39, 43, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0033249855041503906, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 35, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 41, 42, 36, 38, 30, 43, 37, 35, 39, 33, 32, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 38, 35, 37, 39, 43, 32, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 41, 30, 34, 43, 36, 37, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 35, 40, 37, 42, 33, 34, 32, 31, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002897977828979492, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 33, 34, 40, 41, 38, 43, 30, 36, 35, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 41, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028901100158691406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 41, 36, 30, 32, 42, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 30, 38, 40, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035970211029052734, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011149883270263672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009309053421020508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 30, 34, 38, 42, 35, 37, 33, 31, 32, 40, 36, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 39, 41, 42, 36, 38, 43, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009515047073364258, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 39, 41, 32, 42, 37, 34, 30, 38, 35, 36, 43, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 39, 30, 36, 35, 40, 33, 38, 42, 34, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 35, 32, 31, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002482175827026367, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 39, 31, 35, 32, 43, 40, 37, 34, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0025162696838378906, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 35, 43, 42, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010749101638793945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 41, 42, 35, 32, 39, 37, 31, 36, 38, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 41, 34, 40, 33, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009878158569335938, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009224891662597656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 36, 43, 42, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010825157165527344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 32, 37, 34, 41, 33, 30, 39, 43, 42, 35, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 41, 43, 35, 36, 40, 33, 38, 30, 32, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 42, 41, 38, 40, 33, 39, 30, 31, 36, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 31, 34, 39, 40, 38, 42, 32, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024566650390625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009678125381469727, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 34, 43, 35, 41, 40, 38, 30, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 30, 32, 43, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027289390563964844, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 34, 36, 37, 33, 39, 35, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 39, 43, 37, 30, 33, 35, 32, 41, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002850055694580078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 34, 35, 40, 38, 32, 39, 43, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00951075553894043, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 41, 42, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024650096893310547, "tests_passed": true, "error": null}}
{"selected_lines": [41, 31, 37, 34, 42, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002454996109008789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 42, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0038399696350097656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 32, 40, 43, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0018589496612548828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 39, 40, 32, 38, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028989315032958984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 34, 43, 30, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003904104232788086, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 31, 42, 34, 40, 30, 32, 36, 33, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 35, 39, 42, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 31, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 32, 34, 43, 42, 39, 36, 35, 31, 33, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 38, 33, 40, 36, 30, 31, 41, 43, 42, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 34, 41, 43, 38, 42, 32, 39, 40, 31, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 43, 31, 37, 32, 41, 34, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 43, 35, 32, 33, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 38, 43, 41, 37, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 40, 41, 31, 35, 30, 39, 43, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 43, 42, 31, 34, 40, 36, 35, 38, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 39, 43, 42, 40, 33, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 31, 37, 40, 42, 30, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40, 41, 38, 36, 30, 43, 35, 37, 42, 33, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010686159133911133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0042760372161865234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 33, 35, 37, 34, 39, 43, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00433802604675293, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 38, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004513978958129883, "tests_passed": true, "error": null}}
{"selected_lines": [43, 31, 36, 42, 39, 37, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 33, 38, 35, 32, 40, 41, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003787994384765625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011149883270263672, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 31, 37, 36, 35, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 38, 34, 32, 43, 33, 42, 31, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003167867660522461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 36, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 32, 37, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029082298278808594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 37, 41, 36, 32, 40, 42, 38, 33, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009678125381469727, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 32, 37, 30, 33, 39, 41, 36, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003590822219848633, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 34, 39, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029592514038085938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 42, 43, 38, 33, 40, 31, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028281211853027344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 43, 38, 42, 34, 40, 41, 35, 31, 36, 39, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 35, 39, 34, 42, 36, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 32, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010235786437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 36, 41, 34, 38, 35, 32, 31, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 31, 41, 35, 42, 34, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 42, 34, 43, 32, 31, 33, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002444028854370117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 31, 37, 38, 32, 34, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036149024963378906, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009370088577270508, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 39, 40, 38, 34, 43, 37, 42, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029289722442626953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 40, 32, 39, 33, 36, 31, 41, 35, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 31, 36, 37, 43, 41, 30, 39, 35, 32, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 37, 30, 38, 36, 41, 42, 43, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 31, 39, 32, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002936124801635742, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 37, 42, 38, 40, 35, 33, 32, 34, 39, 36, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 42, 31, 35, 43, 38, 37, 30, 40, 41, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 42, 32, 30, 38, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 42, 31, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036649703979492188, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009747982025146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 43, 38, 32, 37, 30, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004475116729736328, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 37, 36, 32, 34, 42, 30, 43, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 43, 31, 30, 35, 37, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 36, 39, 32, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 34, 31, 42, 30, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004395961761474609, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010029077529907227, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 40, 36, 34, 43, 30, 42, 35, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 31, 36, 42, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0045928955078125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 36, 34, 38, 39, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 42, 34, 31, 43, 33, 35, 38, 40, 30, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0031058788299560547, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 35, 36, 43, 34, 42, 33, 30, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 43, 35, 41, 34, 39, 31, 32, 37, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 30, 39, 34, 31, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036890506744384766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 41, 34, 33, 32, 36, 31, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 34, 37, 41, 38, 30, 36, 35, 33, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 41, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002512216567993164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 39, 33, 40, 43, 34, 42, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 41, 36, 38, 39, 37, 35, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030088424682617188, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 33, 37, 40, 35, 31, 38, 30, 43, 41, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036618709564208984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 38, 33, 39, 34, 32, 42, 30, 36, 43, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002986907958984375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 43, 39, 32, 35, 33, 40, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029540061950683594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 36, 38, 39, 35, 33, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 30, 32, 38, 41, 42, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 31, 33, 34, 37, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 32, 36, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 42, 34, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037889480590820312, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009224891662597656, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 32, 33, 35, 41, 43, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003779888153076172, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 39, 30, 37, 35, 36, 33, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 38, 42, 31, 43, 35, 32, 34, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0038080215454101562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30, 39, 42, 40, 36, 31, 33, 37, 34, 41, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 33, 43, 31, 34, 39, 40, 42, 32, 41, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010288000106811523, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037298202514648438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 43, 36, 35, 33, 30, 37, 42, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 40, 42, 35, 33, 37, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004469156265258789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 38, 35, 32, 40, 36, 41, 30, 43, 34, 42, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 37, 39, 34, 31, 40, 36, 41, 33, 35, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 41, 39, 35, 34, 31, 33, 40, 32, 30, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 37, 30, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004399299621582031, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009678125381469727, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 37, 36, 34, 35, 38, 39, 31, 41, 32, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40, 43, 35, 30, 38, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003133058547973633, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 32, 37, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030791759490966797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 42, 30, 39, 33, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009309053421020508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 32, 39, 40, 30, 35, 36, 38, 43, 42, 33, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 42, 34, 40, 39, 37, 30, 41, 31, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 31, 39, 33, 37, 32, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029451847076416016, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 42, 41, 34, 32, 37, 31, 36, 30, 39, 35, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33, 34, 31, 40, 38, 36, 42, 30, 35, 43, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 31, 30, 42, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 43, 42, 32, 33, 38, 30, 39, 41, 35, 31, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011149883270263672, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 42, 33, 40, 34, 41, 43, 39, 32, 38, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 31, 33, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029609203338623047, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 37, 30, 36, 39, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 41, 40, 42, 32, 33, 39, 38, 30, 37, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 40, 39, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 43, 32, 30, 41, 37, 39, 40, 33, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 35, 42, 32, 41, 40, 33, 34, 36, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 40, 35, 33, 38, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002765178680419922, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 32, 38, 43, 41, 39, 30, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38, 33, 34, 41, 40, 30, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0018601417541503906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 34, 43, 32, 38, 39, 37, 42, 33, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 42, 36, 37, 40, 41, 39, 32, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 32, 43, 33, 38, 42, 35, 41, 40, 37, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0018267631530761719, "tests_passed": true, "error": null}}
{"selected_lines": [43, 31, 32, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003670930862426758, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 36, 39, 31, 42, 34, 43, 41, 32, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011613845825195312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33, 41, 32, 40, 35, 31, 43, 42, 38, 30, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028018951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 43, 37, 33, 30, 42, 40, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028960704803466797, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 32, 36, 30, 39, 34, 43, 40, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 41, 42, 38, 40, 37, 35, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002882242202758789, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010390043258666992, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036330223083496094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 40, 41, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 35, 37, 32, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 42, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003553152084350586, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 38, 37, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002807140350341797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 34, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 36, 35, 39, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 30, 43, 35, 32, 33, 34, 31, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002866029739379883, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011142969131469727, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00942230224609375, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010335922241210938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 38, 40, 42, 33, 36, 34, 41, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009224891662597656, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.01318812370300293, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 40, 38, 41, 33, 42, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028259754180908203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009224891662597656, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.01318812370300293, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 38, 41, 31, 43, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0039958953857421875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 30, 39, 37, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 37, 30, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004399299621582031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010270833969116211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 43, 34, 41, 35, 33, 38, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012357711791992188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 41, 32, 36, 37, 42, 40, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 34, 31, 37, 35, 33, 40, 32, 39, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0041620731353759766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 43, 35, 30, 41, 40, 32, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004558086395263672, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009224891662597656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 32, 36, 42, 37, 43, 33, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 32, 40, 38, 33, 35, 34, 31, 42, 43, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003748178482055664, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010363101959228516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003634214401245117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035750865936279297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 43, 41, 31, 34, 40, 30, 42, 36, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 40, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00286102294921875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 39, 43, 34, 36, 33, 42, 38, 41, 32, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 38, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024602413177490234, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 33, 32, 31, 38, 43, 34, 41, 36, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 42, 33, 30, 31, 36, 32, 34, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 32, 37, 31, 38, 35, 41, 30, 39, 36, 34, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 36, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 31, 32, 41, 43, 38, 37, 33, 34, 30, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 38, 35, 32, 31, 33, 37, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 31, 39, 32, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003634929656982422, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 42, 30, 38, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 39, 41, 38, 36, 34, 31, 42, 37, 32, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 33, 42, 41, 32, 43, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 32, 39, 43, 42, 30, 31, 37, 41, 35, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 43, 42, 36, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 41, 43, 37, 34, 36, 33, 32, 30, 31, 42, 35, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 37, 31, 41, 34, 33, 35, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002496004104614258, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 42, 31, 39, 30, 37, 41, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035712718963623047, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 43, 33, 40, 30, 41, 38, 34, 31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 38, 30, 35, 43, 34, 36, 37, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 37, 36, 35, 43, 33, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 33, 30, 35, 36, 43, 34, 32, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 35, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030090808868408203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 40, 42, 39, 30, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 38, 36, 42, 41, 37, 31, 40, 34, 35, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 34, 43, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027730464935302734, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009367227554321289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 42, 39, 33, 35, 31, 36, 37, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 34, 38, 40, 39, 37, 33, 31, 42, 36, 35, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 35, 32, 34, 41, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 34, 36, 35, 39, 38, 31, 41, 30, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 33, 39, 34, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003217935562133789, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002986907958984375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 41, 31, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003434896469116211, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 36, 33, 31, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 31, 38, 40, 37, 41, 42, 30, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003072023391723633, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39, 33, 42, 32, 30, 41, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 31, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 35, 38, 37, 36, 41, 34, 31, 42, 33, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 39, 37, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 42, 30, 43, 38, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004249095916748047, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 38, 42, 30, 39, 35, 31, 32, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0031588077545166016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 38, 32, 35, 33, 40, 36, 30, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 35, 31, 30, 41, 40, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00951075553894043, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 38, 39, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 30, 38, 41, 33, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027430057525634766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011021137237548828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 32, 31, 34, 33, 38, 43, 42, 30, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029981136322021484, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 36, 39, 31, 30, 43, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39, 34, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 30, 34, 43, 31, 35, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003693819046020508, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 42, 43, 30, 35, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029380321502685547, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 39, 36, 31, 38, 32, 43, 30, 37, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 36, 43, 42, 38, 33, 39, 30, 41, 32, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 32, 41, 30, 43, 35, 31, 42, 34, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035750865936279297, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 30, 34, 42, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024247169494628906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 42, 31, 36, 37, 30, 41, 33, 40, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 37, 33, 36, 30, 34, 35, 32, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 41, 35, 39, 36, 30, 40, 43, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 32, 31, 36, 30, 40, 39, 41, 37, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 34, 32, 39, 38, 42, 43, 30, 36, 31, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 43, 42, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002835988998413086, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 32, 35, 36, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 33, 37, 43, 32, 41, 39, 34, 42, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002746105194091797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 38, 36, 35, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 42, 33, 35, 34, 31, 40, 43, 39, 32, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0018019676208496094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 40, 42, 31, 39, 32, 33, 41, 36, 30, 37, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 32, 36, 31, 39, 37, 40, 38, 42, 30, 33, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 35, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024251937866210938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 41, 42, 40, 35, 30, 43, 37, 39, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002914905548095703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 41, 38, 37, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 30, 38, 34, 40, 43, 39, 37, 35, 41, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 36, 38, 37, 34, 42, 35, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 35, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003554821014404297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37, 43, 31, 35, 38, 40, 33, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004637002944946289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 33, 42, 37, 39, 40, 43, 36, 41, 31, 32, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 39, 38, 34, 30, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 32, 30, 31, 39, 35, 36, 40, 37, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.01101994514465332, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 33, 38, 39, 43, 36, 41, 40, 30, 42, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 34, 31, 36, 33, 39, 40, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 37, 35, 36, 39, 38, 41, 33, 30, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 43, 38, 40, 39, 36, 31, 41, 32, 33, 42, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 39, 36, 42, 41, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 42, 40, 35, 36, 39, 43, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 32, 39, 41, 30, 42, 34, 31, 36, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 32, 42, 30, 35, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 32, 31, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030210018157958984, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00951075553894043, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 34, 30, 43, 38, 42, 39, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 32, 35, 40, 33, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00428318977355957, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002880096435546875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 31, 30, 43, 35, 42, 32, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037250518798828125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 30, 38, 34, 31, 37, 42, 43, 35, 32, 36, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as file:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00942230224609375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009816169738769531, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 38, 35, 40, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002524137496948242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 30, 42, 32, 41, 37, 31, 38, 34, 36, 43, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 34, 39, 41, 33, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027332305908203125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 38, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003542184829711914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035750865936279297, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 30, 40, 36, 38, 34, 31, 33, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 33, 38, 34, 30, 42, 32, 41, 31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010029077529907227, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 42, 34, 36, 31, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 38, 32, 30, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036950111389160156, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35, 34, 31, 32, 42, 40, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 42, 30, 43, 38, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004249095916748047, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 34, 36, 38, 41, 43, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 31, 39, 43, 30, 42, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 32, 43, 38, 31, 37, 39, 35, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029659271240234375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 41, 36, 34, 42, 30, 35, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 32, 33, 37, 41, 30, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 42, 40, 39, 35, 38, 41, 31, 32, 34, 30, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 41, 33, 42, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003731250762939453, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 32, 31, 34, 30, 38, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036847591400146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40, 36, 31, 42, 38, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 30, 37, 36, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 36, 40, 43, 38, 30, 42, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036039352416992188, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 40, 34, 42, 30, 37, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002946138381958008, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 38, 39, 37, 35, 36, 40, 41, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 43, 32, 33, 41, 40, 36, 35, 42, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 32, 41, 33, 37, 31, 30, 35, 36, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 42, 35, 39, 32, 33, 36, 37, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 32, 36, 40, 43, 37, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 37, 42, 41, 36, 33, 34, 30, 32, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 41, 39, 43, 33, 36, 31, 38, 37, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 30, 40, 42, 32, 34, 41, 43, 38, 39, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 43, 32, 35, 37, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 30, 34, 40, 35, 31, 36, 37, 33, 43, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 30, 43, 39, 40, 36, 33, 34, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 31, 39, 32, 37, 36, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 43, 38, 42, 32, 34, 41, 36, 39, 40, 33, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 30, 31, 43, 36, 35, 41, 33, 37, 34, 32, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 30, 41, 42, 31, 38, 37, 36, 35, 39, 43, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [41, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004347801208496094, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009924173355102539, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 41, 40, 35, 33, 39, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 42, 35, 34, 43, 39, 40, 30, 31, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030798912048339844, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010029077529907227, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 39, 40, 43, 31, 38, 33, 30, 42, 35, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003192901611328125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 32, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004503965377807617, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 39, 34, 42, 30, 36, 40, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 39, 33, 30, 40, 42, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030660629272460938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 33, 31, 37, 30, 42, 41, 34, 38, 32, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003609180450439453, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 32, 33, 35, 34, 38, 42, 43, 39, 36, 31, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 31, 36, 40, 32, 33, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 32, 31, 43, 40, 39, 37, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 38, 41, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 43, 31, 39, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002868175506591797, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 39, 42, 36, 30, 33, 32, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 36, 38, 43, 37, 34, 40, 31, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 32, 39, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030062198638916016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 31, 38, 37, 30, 32, 43, 41, 40, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 38, 42, 37, 39, 40, 32, 41, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 41, 34, 43, 36, 33, 35, 37, 40, 30, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 33, 31, 37, 32, 43, 30, 41, 39, 35, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029430389404296875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 36, 43, 32, 42, 39, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 37, 43, 34, 31, 36, 33, 32, 40, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 32, 42, 38, 35, 41, 37, 43, 31, 30, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002973794937133789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 35, 36, 31, 30, 43, 41, 33, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 38, 42, 39, 33, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027871131896972656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 30, 33, 39, 31, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029282569885253906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 42, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030221939086914062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35, 41, 40, 38, 43, 36, 39, 42, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009924173355102539, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010894060134887695, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 33, 37, 40, 34, 36, 35, 39, 32, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 40, 42, 32, 39, 30, 33, 34, 37, 36, 31, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 37, 31, 36, 35, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 35, 34, 37, 32, 33, 43, 39, 42, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0018558502197265625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010894060134887695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 39, 33, 30, 40, 42, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030660629272460938, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 35, 40, 43, 37, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 38, 41, 31, 43, 40, 35, 42, 30, 32, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 42, 37, 43, 41, 34, 32, 33, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 34, 32, 30, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029582977294921875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 37, 40, 38, 30, 33, 43, 36, 32, 31, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010363101959228516, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009720087051391602, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010626077651977539, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 30, 41, 40, 38, 36, 35, 42, 32, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 34, 40, 31, 32, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035982131958007812, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 35, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002118825912475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 34, 39, 43, 35, 37, 32, 33, 31, 36, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 41, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010894060134887695, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 34, 42, 41, 35, 38, 31, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 35, 39, 43, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0034101009368896484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 41, 31, 39, 35, 37, 33, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 39, 43, 35, 33, 31, 38, 34, 30, 40, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 38, 35, 42, 36, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 43, 37, 34, 31, 40, 38, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003907203674316406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 42, 30, 39, 43, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 30, 35, 32, 31, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0032770633697509766, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00404810905456543, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 43, 31, 35, 41, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024912357330322266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003673076629638672, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 38, 41, 31, 43, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0039958953857421875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 31, 43, 32, 35, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037529468536376953, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 40, 36, 30, 42, 34, 38, 35, 39, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 33, 40, 34, 35, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003749847412109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 35, 32, 34, 39, 43, 30, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030112266540527344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 36, 37, 41, 38, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 41, 33, 32, 31, 39, 40, 36, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010288000106811523, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 36, 39, 38, 40, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 35, 31, 41, 30, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002816915512084961, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 30, 42, 33, 32, 41, 36, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 42, 37, 38, 31, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029048919677734375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 38, 33, 35, 41, 30, 36, 43, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 31, 32, 35, 41, 39, 30, 37, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 31, 42, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 32, 41, 31, 30, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003629922866821289, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 36, 40, 37, 41, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 40, 37, 35, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002928018569946289, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 38, 40, 35, 42, 33, 34, 32, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 39, 36, 31, 43, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 37, 33, 40, 34, 43, 31, 42, 38, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 30, 31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003712177276611328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 34, 31, 35, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 31, 43, 35, 40, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00443577766418457, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010749101638793945, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 43, 40, 42, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 30, 40, 31, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004331111907958984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 36, 35, 38, 40, 31, 37, 41, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 38, 41, 31, 43, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0039958953857421875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 32, 30, 42, 35, 34, 31, 43, 41, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009515047073364258, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 39, 36, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 33, 39, 35, 37, 34, 43, 41, 30, 31, 42, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 42, 32, 37, 33, 35, 36, 39, 31, 41, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 30, 31, 38, 37, 34, 32, 39, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003365755081176758, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 33, 43, 32, 40, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002877950668334961, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 38, 41, 40, 43, 33, 42, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035877227783203125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 37, 35, 31, 30, 34, 42, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036110877990722656, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010335922241210938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 43, 33, 34, 35, 36, 31, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 37, 35, 33, 41, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0017888545989990234, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 31, 36, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 37, 43, 40, 30, 42, 35, 39, 31, 32, 41, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 31, 35, 30, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003618955612182617, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 31, 34, 38, 33, 37, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0019521713256835938, "tests_passed": true, "error": null}}
{"selected_lines": [39, 30, 31, 32, 33, 42, 34, 35, 38, 40, 43, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015911102294921875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 35, 43, 38, 32, 36, 31, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 31, 39, 32, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002936124801635742, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 42, 30, 43, 38, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 30, 42, 36, 35, 34, 33, 40, 43, 37, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 31, 34, 33, 39, 30, 41, 36, 40, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011643171310424805, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 39, 40, 42, 36, 38, 37, 31, 32, 35, 34, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 40, 42, 32, 35, 38, 34, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029633045196533203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 40, 36, 33, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 42, 35, 41, 32, 38, 33, 39, 34, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 35, 43, 40, 39, 32, 38, 37, 34, 36, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 30, 41, 40, 34, 33, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 31, 38, 43, 40, 37, 35, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 31, 40, 34, 43, 30, 33, 41, 42, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 30, 36, 42, 33, 41, 35, 34, 43, 37, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 41, 33, 36, 37, 42, 31, 34, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029251575469970703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 33, 43, 35, 41, 31, 34, 40, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 37, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 41, 31, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002473115921020508, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024700164794921875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 37, 40, 36, 43, 39, 32, 33, 35, 42, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 32, 30, 41, 39, 34, 33, 35, 42, 40, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002995014190673828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 31, 34, 33, 35, 38, 41, 40, 30, 39, 32, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 40, 42, 35, 33, 43, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035598278045654297, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 31, 43, 37, 33, 34, 30, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030510425567626953, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 40, 36, 38, 42, 41, 43, 35, 39, 32, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 36, 43, 35, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 42, 35, 36, 34, 32, 33, 43, 30, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010686159133911133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003634214401245117, "tests_passed": true, "error": null}}
{"selected_lines": [31, 42, 39, 33, 37, 35, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003359079360961914, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 33, 31, 37, 34, 39, 40, 38, 30, 36, 32, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 38, 34, 35, 41, 36, 42, 33, 31, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 41, 39, 34, 32, 38, 31, 30, 36, 40, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 36, 40, 33, 30, 34, 43, 31, 38, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010390043258666992, "tests_passed": true, "error": null}}
{"selected_lines": [31, 43, 40, 36, 39, 30, 41, 37, 34, 33, 38, 35, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 42, 41, 38, 33, 34, 39, 43, 40, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002936124801635742, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36, 38, 42, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.013580799102783203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 31, 41, 38, 40, 35, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0026187896728515625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 37, 36, 34, 40, 39, 30, 31, 41, 43, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 40, 42, 41, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0049440860748291016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39, 40, 34, 31, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 42, 41, 32, 39, 36, 33, 40, 37, 30, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 34, 30, 33, 40, 43, 36, 32, 31, 35, 37, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 39, 40, 41, 34, 31, 37, 43, 42, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002928018569946289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 36, 34, 42, 38, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00951075553894043, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 32, 38, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004513978958129883, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 33, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003648042678833008, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 35, 39, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029540061950683594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 30, 36, 38, 34, 40, 33, 35, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 42, 31, 34, 37, 33, 39, 35, 38, 41, 32, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 37, 38, 33, 31, 32, 35, 43, 36, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 38, 33, 37, 31, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 30, 35, 38, 36, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 30, 35, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003704071044921875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 40, 31, 33, 32, 43, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 39, 35, 40, 33, 37, 34, 41, 38, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 41, 42, 30, 35, 31, 33, 34, 43, 39, 40, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028209686279296875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 39, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028002262115478516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 33, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035889148712158203, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012357711791992188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 39, 35, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027551651000976562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 38, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004513978958129883, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 37, 40, 36, 32, 43, 34, 31, 42, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010686159133911133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 35, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 41, 43, 42, 31, 34, 36, 33, 39, 37, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 35, 40, 41, 42, 30, 38, 34, 43, 39, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002892017364501953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 39, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00290679931640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 39, 40, 32, 43, 35, 38, 42, 33, 36, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 39, 31, 36, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 43, 38, 39, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002826213836669922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 30, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0031321048736572266, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010825157165527344, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010029077529907227, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 39, 42, 33, 40, 43, 31, 30, 34, 38, 41, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 31, 42, 38, 39, 32, 43, 33, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030930042266845703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 41, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0031690597534179688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 30, 36, 35, 42, 32, 34, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 30, 36, 38, 42, 40, 34, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035750865936279297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 41, 35, 43, 36, 30, 31, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 39, 43, 38, 40, 30, 41, 37, 31, 33, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 37, 32, 34, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009678125381469727, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 31, 39, 30, 40, 33, 37, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002942800521850586, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 36, 34, 32, 30, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 39, 33, 30, 40, 42, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030660629272460938, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 38, 41, 42, 32, 30, 34, 37, 35, 31, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 30, 35, 37, 36, 40, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 39, 30, 33, 32, 35, 37, 40, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 36, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 38, 41, 34, 36, 33, 43, 32, 31, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 42, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 35, 36, 33, 43, 42, 39, 30, 34, 40, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 33, 41, 35, 34, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 42, 31, 36, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 30, 35, 31, 39, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 34, 37, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 33, 38, 41, 31, 36, 32, 35, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 43, 40, 37, 41, 38, 31, 42, 30, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0032410621643066406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 40, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036809444427490234, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 39, 40, 43, 42, 31, 34, 33, 36, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 30, 40, 31, 38, 33, 37, 41, 32, 35, 34, 42, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 43, 30, 35, 41, 39, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 31, 32, 35, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002931833267211914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 35, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011142969131469727, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012357711791992188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 38, 43, 42, 36, 31, 30, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 30, 35, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027818679809570312, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003673076629638672, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 39, 37, 40, 30, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 35, 31, 38, 34, 33, 39, 30, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029511451721191406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 33, 42, 30, 31, 40, 41, 35, 36, 39, 32, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 37, 41, 30, 38, 33, 42, 34, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002858877182006836, "tests_passed": true, "error": null}}
{"selected_lines": [42, 30, 34, 31, 38, 36, 37, 41, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 36, 39, 38, 31, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 36, 31, 42, 41, 33, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 35, 33, 36, 30, 42, 40, 43, 34, 39, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 35, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 30, 40, 39, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009678125381469727, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40, 42, 39, 36, 35, 31, 30, 32, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 31, 33, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024580955505371094, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 34, 33, 40, 35, 30, 43, 36, 31, 41, 37, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009816169738769531, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 39, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 35, 42, 36, 33, 30, 40, 41, 34, 39, 37, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002919912338256836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 36, 43, 35, 39, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 31, 32, 30, 33, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036668777465820312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 31, 36, 41, 40, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 34, 36, 32, 41, 43, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010029077529907227, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 35, 40, 31, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037720203399658203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 42, 34, 36, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 43, 32, 30, 36, 35, 33, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 34, 42, 31, 32, 33, 43, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 41, 33, 37, 43, 34, 36, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 36, 40, 41, 30, 43, 31, 42, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 35, 40, 37, 41, 32, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [41, 31, 42, 43, 40, 35, 39, 33, 36, 34, 30, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 37, 38, 41, 36, 30, 33, 40, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010363101959228516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 43, 32, 40, 34, 35, 42, 37, 31, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030841827392578125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 35, 30, 39, 33, 31, 38, 43, 36, 34, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 37, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003735065460205078, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 43, 38, 35, 30, 36, 33, 31, 39, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 31, 40, 39, 38, 37, 34, 42, 36, 41, 30, 32, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42, 32, 31, 30, 35, 39, 37, 33, 34, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00951075553894043, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 40, 36, 30, 33, 31, 42, 41, 34, 35, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 39, 41, 31, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 33, 37, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003648996353149414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 32, 39, 33, 36, 40, 30, 35, 41, 34, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.01199197769165039, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 40, 39, 35, 32, 30, 33, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0033447742462158203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010390043258666992, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 42, 34, 35, 40, 43, 30, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/**/*.txt\", recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 36, 39, 41, 32, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 32, 36, 37, 34, 42, 43, 33, 41, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 30, 32, 38, 36, 37, 39, 42, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 41, 32, 38, 31, 42, 30, 39, 33, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 43, 37, 40, 33, 34, 42, 30, 41, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003329753875732422, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 31, 36, 33, 34, 30, 32, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 38, 40, 36, 32, 30, 42, 39, 33, 34, 43, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 31, 30, 34, 41, 35, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0038111209869384766, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 43, 37, 30, 31, 40, 42, 34, 36, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 35, 42, 34, 38, 43, 31, 32, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004416942596435547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34, 30, 40, 42, 37, 31, 39, 41, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030426979064941406, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024733543395996094, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 30, 36, 35, 34, 38, 31, 37, 43, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 33, 34, 42, 41, 43, 38, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 32, 36, 42, 43, 41, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30, 32, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 39, 37, 32, 38, 31, 40, 30, 34, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010335922241210938, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 39, 31, 43, 30, 37, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002804994583129883, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 40, 39, 36, 41, 30, 31, 33, 34, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 37, 38, 36, 41, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 39, 35, 42, 40, 33, 41, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028541088104248047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 36, 41, 31, 33, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009870052337646484, "tests_passed": true, "error": null}}
{"selected_lines": [31, 42, 40, 30, 43, 37, 39, 32, 35, 38, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029129981994628906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 38, 42, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00951075553894043, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 43, 42, 38, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002835988998413086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 38, 36, 30, 32, 39, 31, 34, 35, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 32, 42, 40, 34, 41, 43, 39, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 39, 33, 30, 40, 42, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030660629272460938, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 38, 42, 34, 41, 40, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036661624908447266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 38, 37, 36, 33, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 43, 40, 34, 30, 31, 37, 32, 41, 38, 36, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 39, 32, 38, 40, 37, 35, 33, 34, 43, 41, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 42, 30, 36, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 42, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024619102478027344, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009902715682983398, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 40, 42, 39, 31, 34, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002862215042114258, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 42, 38, 40, 39, 41, 34, 31, 36, 43, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 36, 34, 31, 37, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 36, 31, 30, 34, 32, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 33, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028290748596191406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 42, 37, 31, 34, 41, 36, 30, 33, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [40, 30, 31, 34, 43, 38, 41, 36, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 31, 36, 42, 34, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 37, 35, 30, 36, 38, 33, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035567283630371094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 30, 37, 35, 31, 39, 42, 38, 32, 33, 36, 34, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 36, 34, 40, 43, 41, 31, 39, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist!\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 31, 32, 41, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037238597869873047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009515047073364258, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 41, 30, 34, 31, 33, 42, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002579927444458008, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 41, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004261970520019531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 43, 31, 40, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 31, 33, 32, 43, 37, 30, 38, 42, 36, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 43, 41, 33, 40, 32, 42, 35, 36, 37, 31, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 43, 42, 37, 31, 40, 39, 34, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 42, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 33, 34, 42, 43, 30, 32, 39, 36, 40, 31, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010901927947998047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 32, 35, 30, 42, 31, 39, 33, 38, 41, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 41, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0026297569274902344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 35, 30, 38, 37, 43, 34, 31, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 36, 40, 39, 30, 34, 32, 35, 43, 37, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 35, 41, 42, 36, 40, 33, 31, 30, 43, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 31, 40, 34, 39, 43, 38, 32, 36, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 41, 33, 34, 42, 37, 32, 40, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004391908645629883, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 34, 42, 33, 31, 37, 35, 41, 38, 43, 40, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 39, 34, 32, 41, 42, 43, 33, 36, 31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 39, 42, 37, 31, 32, 30, 36, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{os.path.basename(file_path)}.{hash_object.hexdigest()}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011142969131469727, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010626077651977539, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003366231918334961, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41, 42, 43, 40, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003763914108276367, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 30, 40, 39, 42, 33, 36, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 30, 32, 43, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027289390563964844, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010749101638793945, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 42, 35, 30, 39, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 33, 41, 31, 39, 37, 40, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010825157165527344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39, 40, 42, 43, 34, 36, 31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 39, 41, 42, 35, 31, 36, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 35, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003629922866821289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 33, 40, 30, 34, 39, 41, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 39, 30, 40, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028891563415527344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 30, 42, 36, 33, 32, 31, 41, 43, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'File \"{source_dir}\" not found')\n    if not os.path.isdir(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [42, 31, 39, 34, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003002166748046875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 37, 35, 34, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003634214401245117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009747982025146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009609222412109375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 38, 33, 40, 41, 32, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027799606323242188, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 41, 42, 30, 43, 34, 31, 35, 39, 33, 37, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002888917922973633, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 35, 33, 32, 36, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 30, 34, 36, 43, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + os.path.splitext(file_path)[1]\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 35, 41, 38, 30, 43, 40, 39, 31, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 30, 31, 36, 35, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 40, 37, 33, 31, 43, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003050088882446289, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.01318812370300293, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 35, 40, 34, 41, 43, 42, 30, 39, 36, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 40, 43, 33, 38, 39, 41, 34, 31, 36, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 41, 36, 43, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 39, 37, 40, 31, 33, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035829544067382812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 39, 37, 41, 38, 36, 32, 34, 33, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009224891662597656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 35, 40, 36, 42, 31, 33, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Directory '{}' not found\".format(source_dir))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 40, 33, 35, 41, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()} {content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0018358230590820312, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 41, 35, 40, 32, 37, 33, 31, 30, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 39, 40, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002953052520751953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00419306755065918, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 42, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030221939086914062, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 31, 30, 41, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n{content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0040988922119140625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 35, 42, 34, 30, 41, 31, 40, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003947019577026367, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [41, 31, 30, 36, 34, 43, 35, 32, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0032629966735839844, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 41, 33, 43, 35, 34, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 33, 32, 38, 41, 31, 30, 37, 42, 39, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'Source directory {source_dir} does not exist')\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest())\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0025212764739990234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 39, 35, 38, 33, 36, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 36, 37, 33, 31, 42, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003366231918334961, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 38, 34, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 31, 30, 32, 37, 39, 35, 38, 34, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest() + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 34, 39, 30, 41, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 32, 31, 37, 43, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0018601417541503906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 43, 39, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 42, 38, 41, 39, 40, 35, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009678125381469727, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 39, 35, 34, 36, 41, 37, 38, 43, 32, 40, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009855031967163086, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037031173706054688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 33, 35, 36, 43, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 40, 39, 32, 36, 30, 37, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 41, 43, 32, 39, 30, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029211044311523438, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 36, 35, 34, 30, 32, 43, 31, 39, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.016277790069580078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 42, 30, 36, 35, 31, 37, 39, 33, 38, 40, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010444164276123047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 39, 32, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(f\"{source_dir}/*.txt\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0030138492584228516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010586023330688477, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 31, 39, 33, 37, 32, 30, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 33, 35, 43, 41, 40, 37, 30, 39, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode('utf-8'))\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r+b') as source_file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009609222412109375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.015247821807861328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 33, 40, 37, 34, 41, 42, 31, 38, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 37, 41, 40, 38, 31, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 43, 36, 38, 40, 32, 41, 33, 39, 42, 35, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist')\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 40, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 37, 32, 36, 30, 42, 35, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 43, 36, 31, 39, 42, 30, 37, 35, 32, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 43, 37, 36, 39, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 41, 35, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024499893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 34, 32, 35, 33, 36, 38, 42, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 40, 30, 37, 43, 35, 33, 32, 31, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009616851806640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 40, 36, 39, 42, 41, 37, 43, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.md5')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 37, 30, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004399299621582031, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 42, 33, 39, 37, 31, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027680397033691406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 33, 43, 34, 42, 32, 37, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory {source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035729408264160156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 40, 33, 34, 36, 42, 31, 35, 30, 41, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The specified source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 41, 31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0028829574584960938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 35, 40, 39, 31, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory does not exist: {source_dir}\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*.txt'):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0036110877990722656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010390043258666992, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 30, 43, 32, 38, 31, 35, 37, 41, 40, 33, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0037660598754882812, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 41, 38, 36, 37, 32, 40, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(prefix + hash_object.hexdigest() + '\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 42, 31, 35, 32, 34, 39, 37, 43, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"The source directory {source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest()) + '.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0031630992889404297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 40, 38, 36, 35, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 30, 37, 35, 34, 33, 42, 31, 43, 32, 38, 40], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 42, 38, 30, 34, 40, 33, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 37, 30, 38, 43], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004399299621582031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Source directory does not exist!')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010519027709960938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 38, 40, 41, 36, 42, 30, 39], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f'{source_dir}/*'):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}-{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.012513160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009613037109375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 38, 31, 43, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00436711311340332, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 41, 38, 33, 39, 36, 32, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 42, 39, 31, 43, 38, 36, 35, 30, 37, 32, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f'{prefix}{hash_object.hexdigest()}.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 43, 41], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 38, 37, 40, 33, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, exist_ok=True)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.004026174545288086, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 34, 37, 38, 31, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"**\", \"*\"), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, prefix + hash_object.hexdigest())\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.003100872039794922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 30, 32, 31, 41, 35, 43, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0038840770721435547, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 40, 31, 36, 41, 38, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 35, 36, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 38, 31, 41, 39, 30, 43, 34, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('source_dir does not exist')\n    if not os.path.isdir(source_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029497146606445312, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 38, 37, 42, 36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.009948015213012695, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 43, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.*')):\n        with open(file_path, 'rb') as source:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 30, 38, 40, 39, 32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 43, 31, 37, 42, 39, 36, 40, 30, 38, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('The source directory does not exist: ' + source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.txt'), recursive=True):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path).replace('.txt', f'.{hash_object.hexdigest()}.txt'))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 30, 31, 42, 39, 32, 36, 35, 43, 37, 34, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.isdir(source_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*.*\")):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path) + '.txt')\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 43, 42, 37, 39, 41, 32, 33, 34, 35, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, '**/*.*'), recursive=True):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0029540061950683594, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as f:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.010248184204101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 36, 32, 35, 43, 34, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Directory {source_dir} not found.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.iglob(os.path.join(source_dir, \"**/*.txt\"), recursive=True):\n        with open(file_path, 'r') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 32, 41, 38, 39, 36, 31, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f'The specified source directory does not exist: {source_dir}')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.00951075553894043, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 39, 32, 41, 43, 33, 38, 42, 31, 37], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix}{hash_object.hexdigest()}\\n')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0027341842651367188, "tests_passed": true, "error": null}}
{"selected_lines": [31, 41, 34], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError('Directory does not exist')\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f'{prefix} {hash_object.hexdigest()} {content}')\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0024127960205078125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 31, 40, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0035669803619384766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 42, 43, 30, 32, 34, 41, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"{source_dir} does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 41, 40, 35, 33, 43, 32, 37, 36, 30, 42], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'rb') as file:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 36, 42, 40, 34, 33, 35, 39, 41, 43, 38, 30], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.isdir(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, \"*\")):\n        with open(file_path) as f:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}.txt\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 39, 42, 41, 33, 40, 37, 35], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*.txt')):\n        with open(file_path, 'rb') as file_obj:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, f\"{prefix}{hash_object.hexdigest()}{os.path.basename(file_path)}\")\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 41, 40, 35, 33], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '**', '*.txt')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0019037723541259766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 30, 43, 37, 41, 34, 31, 39, 42, 35, 36, 38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(f\"{source_dir}/*\"):\n        with open(file_path, 'rb') as file:\n            content = prefix + hashlib.md5(infile.read().encode()).hexdigest()\n        hash_object = hashlib.md5()\n        new_file_path = f'{target_dir}/{prefix}{hash_object.hexdigest()}.txt'\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}{os.linesep}{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.0145721435546875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport glob\nimport hashlib\n\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    \"\"\"\n    Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix \n    to the original content, and writes the modified content to new files in the `target_dir`. \n    Existing files with the same name in `target_dir` are overwritten.\n\n    Parameters:\n    - source_dir (str): The directory containing the files to be processed. Must exist.\n    - target_dir (str): The directory where the processed files will be written. Created if it does not exist.\n    - prefix (str): The prefix to prepend before the hash in each new file. Default is '#Hash: '.\n\n    Returns:\n    - list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\n\n    Requirements:\n    - os\n    - glob\n    - hashlib\n\n    Raises:\n    FileNotFoundError if the source directory does not exist.\n\n    Example:\n    >>> task_func(source_dir='samples', target_dir='hashed_samples', prefix='#MD5: ')\n    ['hashed_samples/file1.txt', 'hashed_samples/file2.txt']\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        hash_object = hashlib.md5()\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        new_files.append(new_file_path)\n    return new_files", "compilation_passed": true, "time": 0.011346101760864258, "tests_passed": true, "error": null}}
