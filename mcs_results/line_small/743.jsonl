{"selected_lines": [31, 30, 29, 36, 28, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 36, 30, 31, 29, 35, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 32, 36, 31, 30, 28, 35, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31, 27, 33, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 31, 36, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 33, 32, 27, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 35, 33, 28, 34, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 27, 29, 31, 36, 30, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": false, "time": 0.00013184547424316406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29, 31, 30, 36, 32, 27, 33, 34, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 29, 36, 32, 35, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 33, 29, 36, 34, 32, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 27, 33, 28, 34, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 28, 31, 32, 36, 29, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03176069259643555, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 27, 30, 28, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 28, 33, 34, 32, 36, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 27, 35, 33, 36, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 35, 36, 30, 32, 28, 29, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 28, 29, 36, 31, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0027701854705810547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 27, 35, 28, 31, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 33, 28, 30, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 34, 29, 33, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 30, 28, 36, 32, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019071102142333984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 28, 34, 33, 27, 30, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012396097183227539, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 36, 33, 31, 32, 30, 35, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 29, 32, 33, 30, 36, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002620220184326172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 28, 36, 33, 29, 32, 27, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018906593322753906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019409656524658203, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 30, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 32, 33, 30, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 27, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 31, 33, 29, 34, 30, 32, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 28, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007937908172607422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 29, 32, 33, 30, 36, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002620220184326172, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 28, 34, 27, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 27, 35, 36, 32, 33, 29, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 36, 33, 32, 30, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 32, 33, 34, 31, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 30, 33, 31, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 32, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0026640892028808594, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 36, 33, 35, 30, 34, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007941246032714844, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 34, 31, 33, 36, 35, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 31, 32, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": false, "time": 0.00013184547424316406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 34, 27, 32, 33, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": false, "time": 0.00013184547424316406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 36, 33, 35, 30, 34, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007941246032714844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008800983428955078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 28, 35, 27, 34, 36, 30, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 31, 29, 34, 27, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 29, 27, 32, 28, 35, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 29, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 28, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007937908172607422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 35, 29, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 31, 36, 32, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 34, 33, 31, 35, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 33, 30, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 29, 35, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 28, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002798795700073242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 27, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 30, 35, 28, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 30, 36, 34, 31, 32, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00874018669128418, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 36, 34, 28, 35, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 29, 32, 30, 28, 27, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0028018951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 31, 29, 34, 27, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 31, 32, 36, 29, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 30, 36, 33, 27, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 29, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 27, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34, 33, 36, 27, 35, 31, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001931905746459961, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 36, 28, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 36, 33, 35, 30, 34, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007941246032714844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 31, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 33, 34, 27, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017828941345214844, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.010881185531616211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 27, 29, 35, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002610921859741211, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 28, 36, 35, 27, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 31, 32, 36, 29, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03176069259643555, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 32, 30, 35, 36, 34, 33, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 28, 30, 27, 35, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 31, 32, 36, 29, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 30, 29, 34, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 29, 32, 33, 30, 36, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002620220184326172, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 33, 34, 31, 28, 36, 32, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 27, 29, 34, 28, 32, 36, 33, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 27, 32, 33, 36, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 33, 27, 36, 30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 27, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019490718841552734, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 28, 34, 29, 36, 32, 27, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 27, 34, 32, 30, 29, 35, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 34, 29, 36, 33, 28, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03176069259643555, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 28, 36, 33, 30, 32, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 30, 33, 34, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002786874771118164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 31, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31, 36, 28, 35, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 27, 36, 28, 34, 30, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019180774688720703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 27, 29, 35, 30, 28, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 33, 27, 31, 35, 34, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008800983428955078, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 27, 30, 31, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 32, 28, 30, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 28, 34, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03225111961364746, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012396097183227539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 27, 30, 31, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 32, 31, 28, 36, 34, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 34, 36, 33, 32, 35, 27, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008910179138183594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 29, 33, 28, 27, 34, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017819404602050781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 27, 28, 30, 36, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019021034240722656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 27, 29, 33, 30, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 36, 33, 35, 30, 34, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007941246032714844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 30, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 36, 34, 31, 32, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00874018669128418, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012396097183227539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 32, 34, 29, 33, 36, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 34, 30, 31, 27, 28, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 36, 29, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 28, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002798795700073242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 30, 32, 36, 28, 34, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 36, 34, 29, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008665800094604492, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 28, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002798795700073242, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 33, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 31, 35, 33, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018460750579833984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 28, 33, 30, 32, 35, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [27, 34, 28, 35, 32, 31, 29, 33, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 29, 32, 33, 30, 36, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002620220184326172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 32, 27, 35, 30, 31, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 28, 32, 35, 29, 31, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [27, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 27, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 27, 31, 30, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 35, 30, 28, 29, 36, 34, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 32, 31, 29, 36, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 35, 33, 31, 29, 32, 36, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32, 28, 31, 35, 33, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03176069259643555, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 34, 33, 36, 27, 35, 31, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001931905746459961, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 29, 36, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.04492616653442383, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 28, 35, 30, 34, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 30, 29, 35, 28, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 29, 30, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 28, 34, 29, 33, 30, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.04492616653442383, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 36, 33, 34, 30, 31, 35, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 27, 28, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 28, 33, 29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34, 36, 33, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 32, 36, 35, 30, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 27, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019490718841552734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 30, 33, 27, 36, 31, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012396097183227539, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03225111961364746, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 28, 35, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002660036087036133, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 27, 28, 29, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007955789566040039, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 36, 34, 29, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008665800094604492, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 36, 35, 29, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 29, 36, 28, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 29, 31, 28, 32, 30, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 29, 32, 33, 30, 36, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002620220184326172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 27, 30, 35, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 30, 31, 32, 36, 29, 28, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 27, 28, 31, 36, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 30, 33, 34, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002786874771118164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 28, 29, 34, 35, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001856088638305664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 35, 27, 33, 32, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008817911148071289, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 27, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019490718841552734, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 27, 29, 30, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.010881185531616211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 36, 29, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 29, 36, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 27, 35, 33, 36, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 28, 27, 30, 29, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016340970993041992, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35, 27, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 36, 34, 29, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008665800094604492, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 31, 29, 34, 27, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 36, 34, 31, 32, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00874018669128418, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 28, 30, 31, 29, 27, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 28, 29, 36, 33, 34, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 31, 30, 28, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": false, "time": 0.00013184547424316406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 32, 27, 31, 33, 28, 29, 35, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 27, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 30, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 30, 31, 35, 32, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 35, 34, 29, 36, 33, 28, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 32, 30, 33, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 34, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 29, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 36, 34, 29, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008665800094604492, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012396097183227539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 29, 33, 35, 34, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008837223052978516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 29, 33, 32, 30, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 35, 36, 27, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 28, 27, 34, 30, 32, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008897066116333008, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 28, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 27, 34, 29, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 30, 33, 34, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002786874771118164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 35, 36, 31, 33, 29, 34, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 36, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.015629053115844727, "tests_passed": true, "error": null}}
{"selected_lines": [32, 27, 33, 36, 35, 30, 34, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008800983428955078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 35, 30, 27, 29, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 29, 36, 32, 27, 31, 28, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019159317016601562, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 29, 27, 31, 34, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 28, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 27, 33, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 30, 29, 36, 35, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 31, 33, 27, 34, 36, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019550323486328125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 27, 36, 32, 34, 33, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001950979232788086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 27, 36, 31, 30, 35, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30, 36, 33, 28, 32, 27, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 27, 36, 32, 34, 33, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001950979232788086, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 29, 32, 31, 33, 27, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.010881185531616211, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 32, 34, 35, 31, 28, 27, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 29, 34, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 30, 33, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008845090866088867, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 29, 32, 34, 30, 28, 35, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00921177864074707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 29, 32, 33, 30, 36, 34, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002620220184326172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 27, 36, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 34, 33, 29, 31, 35, 30, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008692264556884766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 36, 28, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 30, 33, 34, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002786874771118164, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 27, 33, 31, 28, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 31, 27, 36, 28, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [34, 27, 29, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 28, 33, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 31, 35, 27, 28, 36, 33, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008810043334960938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 32, 30, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 36, 34, 28, 27, 30, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 27, 31, 36, 33, 28, 35, 29, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 34, 35, 27, 29, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 30, 33, 34, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002786874771118164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 27, 30, 33, 35, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.010881185531616211, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 28, 34, 30, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 36, 34, 29, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008665800094604492, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 28, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002798795700073242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": false, "time": 0.00013184547424316406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 36, 34, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 27, 30, 28, 34, 35, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 30, 33, 34, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002786874771118164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 30, 32, 34, 28, 36, 29, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 35, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 27, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 30, 33, 32, 31, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 29, 35, 36, 27, 32, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 36, 33, 34, 27, 28, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 34, 32, 28, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 30, 29, 33, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [27, 31, 36, 28, 33, 35, 32, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 28, 34, 30, 36, 27, 31, 33, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 35, 33, 31, 27, 34, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 33, 28, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002798795700073242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 30, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 36, 32, 29, 30, 28, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 28, 36, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002798795700073242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 27, 29, 28, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018000602722167969, "tests_passed": true, "error": null}}
{"selected_lines": [27, 31, 30, 33, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008845090866088867, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 35, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 27, 36, 30, 28, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 28, 27, 32, 35, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 30, 28, 31, 32, 36, 29, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 28, 34, 29, 30, 35, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018229484558105469, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 31, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0027921199798583984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 34, 35, 30, 31, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [27, 36, 35, 29, 34, 33, 31, 28, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 27, 34, 30, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 34, 27, 32, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001905202865600586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 36, 29, 32, 34, 27, 31, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 30, 28, 36, 32, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019071102142333984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 34, 27, 36, 33, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 35, 34, 28, 27, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34, 36, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 31, 32, 36, 29, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 28, 36, 33, 35, 30, 34, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007941246032714844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 35, 31, 36, 33, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 27, 28, 32, 36, 29, 33, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 35, 36, 31, 27, 30, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [27, 36, 33, 32, 29, 28, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 27, 30, 33, 34, 36, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 27, 31, 35, 28, 30, 34, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 36, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 27, 33, 32, 29, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 28, 33, 36, 27, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 27, 29, 30, 33, 36, 34, 32, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0035293102264404297, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012396097183227539, "tests_passed": true, "error": null}}
{"selected_lines": [31, 27, 28, 33, 29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": true, "error": null}}
{"selected_lines": [27, 34, 36, 28, 29, 33, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 27, 29, 36, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 30, 33, 34, 28, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002786874771118164, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 31, 35, 29, 34, 30, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019009113311767578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 29, 36, 32, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 30, 36, 34, 31, 32, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00874018669128418, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 27, 36, 32, 34, 33, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001950979232788086, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 28, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018372535705566406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30, 29, 31, 27, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 35, 36, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 31, 32, 36, 29, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 27, 36, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 30, 36, 34, 31, 32, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00874018669128418, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002777099609375, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 31, 34, 36, 29, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 35, 34, 29, 36, 33, 28, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 33, 35, 31, 28, 36, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 30, 28, 36, 32, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019071102142333984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 34, 33, 36, 27, 35, 31, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001931905746459961, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 31, 32, 30, 29, 34, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 27, 30, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 36, 27, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 28, 29, 34, 35, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001856088638305664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008823156356811523, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 30, 28, 36, 32, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019071102142333984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 27, 31, 30, 33, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 36, 28, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 27, 30, 33, 35, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 28, 29, 36, 31, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0027701854705810547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 27, 32, 30, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 36, 34, 29, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008665800094604492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 32, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 36, 34, 31, 32, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.00874018669128418, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 35, 36, 27, 34, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 29, 36, 28, 34, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 27, 35, 30, 29, 36, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 36, 35, 30, 33, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 27, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019490718841552734, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.04492616653442383, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 32, 33, 28, 35, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 36, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008888006210327148, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 33, 35, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 29, 32, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002669811248779297, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 27, 31, 36, 30, 28, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 27, 34, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019419193267822266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 33, 31, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.007922887802124023, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 29, 30, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 30, 28, 36, 32, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019071102142333984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 27, 32, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019490718841552734, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 33, 35, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 31, 29, 34, 27, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 30, 31, 29, 33, 28, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0027618408203125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 31, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008717060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict(zip(PREFIXES, (0] * len(PREFIXES)))\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": false, "time": 0.00013709068298339844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [27, 29, 33, 32, 34, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018551349639892578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0157010555267334, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.015629053115844727, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 27, 29, 32, 34, 36, 31, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019118785858154297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 28, 35, 33, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019268989562988281, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 34, 33, 36, 27, 35, 31, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.001931905746459961, "tests_passed": true, "error": null}}
{"selected_lines": [35, 27, 34, 31, 33, 29, 28, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 27, 30, 36, 34, 31, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 32, 27, 28, 35, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.027637004852294922, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 31, 35, 33, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018460750579833984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 27, 31, 28, 30, 33, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 34, 36, 30, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.016395092010498047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 36, 33, 31, 28, 30, 29, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018851757049560547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 28, 36, 33, 27, 35, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002777099609375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 31, 33, 27, 34, 36, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019550323486328125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 31, 28, 30, 29, 27, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018851757049560547, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 32, 36, 30, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.010881185531616211, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 34, 30, 36, 33, 32, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 28, 36, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": false, "time": 0.00013184547424316406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 29, 31, 28, 32, 30, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as json_file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 34, 29, 32, 28, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 31, 35, 33, 29, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018460750579833984, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 30, 31, 34, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.002019643783569336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 28, 27, 29, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008713006973266602, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 29, 27, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 29, 27, 32, 31, 30, 35, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0028438568115234375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 27, 28, 30, 36, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict()\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019021034240722656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 30, 36, 33], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008825063705444336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 31, 30, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0027921199798583984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36, 31, 27, 33, 35, 30, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.012622833251953125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 27, 33, 31], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 27, 33, 32, 34], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {key: 0 for key in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008817911148071289, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 30, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 35, 36, 27, 33, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0021512508392333984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 33, 30, 27, 29, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 36], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, filename)):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.029989957809448242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03134489059448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 33, 31, 36, 29, 27, 28], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 27, 29, 28, 31, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if not filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0018000602722167969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.030392169952392578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 33, 29, 31, 30, 27, 35], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.008736133575439453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 36, 30], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.037405967712402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 31, 29, 27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0019078254699707031, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = dict.fromkeys(PREFIXES, 0)  # Initialize the dictionary with zeros for every key in PREFIXES\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.03225111961364746, "tests_passed": true, "error": null}}
{"selected_lines": [27, 35, 28, 30, 33, 32, 36, 29], "result": {"code": "import json\nimport os\n\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\n\ndef task_func(directory):\n    \"\"\"\n    Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes \n    (defined in the PREFIXES constant), and return a dictionary of statistics.\n\n    Parameters:\n    - directory (str): The directory path where the JSON files are located.\n\n    Returns:\n    - dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\n\n    Requirements:\n    - json\n    - os\n\n    Example:\n    >>> task_func('/path/to/json/files')\n    {'is_': 10, 'has_': 5, 'can_': 3, 'should_': 2}\n    >>> task_func('/another/path/to/json/files')\n    {'is_': 8, 'has_': 6, 'can_': 1, 'should_': 4}\n    \"\"\"\n    stats = {}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(f)\n            for key, value in data.items():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n    return stats", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
