{"selected_lines": [41, 31, 48, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 45, 35, 44, 47, 48, 40, 49, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 45, 31, 42, 40, 44, 50, 37, 47, 46, 48, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except OSError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 44, 34, 46, 45, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004452228546142578, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 44, 41, 45, 34, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01254129409790039, "tests_passed": false, "error": "OSError"}}
{"selected_lines": [32, 42, 37, 34, 35, 41, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 50, 40, 49, 47, 32, 31, 35, 39, 34, 44, 48, 42, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 41, 50, 37, 49, 48, 42, 44, 46, 40, 31, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 48, 46, 50, 31, 40, 45, 39, 49, 32, 41, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 41, 40, 45, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010988712310791016, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 32, 48, 34, 37, 31, 45, 44, 35, 39, 47, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 40, 39, 42, 34, 35, 48, 37, 31, 32, 47, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 40, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009920597076416016, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 31, 37, 34, 42, 32, 47, 40, 50, 46, 39, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.0001270771026611328, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 49, 34, 45, 44, 40, 32, 46, 42, 41, 39, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009429454803466797, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 32, 39, 35, 37, 44, 34, 49, 48, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 41, 50, 37, 35, 31, 45, 34, 44, 49, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 42, 41, 45, 39, 47, 44, 35, 37, 40, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012496232986450195, "tests_passed": false, "error": "OSError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010375022888183594, "tests_passed": true, "error": null}}
{"selected_lines": [31, 47, 48, 41, 39, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 42, 48, 31, 44, 32, 50, 45, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except OSError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 49, 35, 31, 45, 46, 34, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 47, 49, 31, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 31, 49, 41, 40, 34, 47, 32, 50, 46, 44, 35, 48, 39, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 40, 47, 41, 32, 31, 50, 39, 42, 44, 37, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 47, 50, 41, 39, 35, 46, 45, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 32, 47, 45, 42, 46, 50, 37, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004126071929931641, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 45, 50, 31, 41, 39, 37, 32, 34, 46, 44, 47, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010190010070800781, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 34, 49, 50, 32, 46, 39, 37, 45, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0032057762145996094, "tests_passed": true, "error": null}}
{"selected_lines": [37, 47, 35, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009899139404296875, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [47, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0035402774810791016, "tests_passed": true, "error": null}}
{"selected_lines": [48, 37, 42, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39, 32, 35, 41, 48, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 37, 41, 32, 34, 46, 48, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 34, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 45, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 48, 46, 41, 44, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 46, 47, 41, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00410008430480957, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 31, 32, 37, 49, 48, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009889602661132812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 47, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 47, 34, 32, 40, 37, 44, 48, 42, 45, 46, 31, 39, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except OSError as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 41, 34, 42, 45, 37, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 50, 31, 49, 37, 34, 46, 47, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003914833068847656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 45, 46, 49, 40, 31, 39, 47, 32, 37, 42, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.000997781753540039, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 40, 34, 41, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 50, 41, 49, 35, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004006147384643555, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009055852890014648, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.00013494491577148438, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 46, 48, 42, 37, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 41, 50, 37, 47, 35, 39, 46, 31, 40, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 35, 41, 48, 39, 44, 32, 49, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 46, 48, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 50, 35, 31, 37, 42, 32, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 32, 50, 48, 35, 47, 34, 40, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 41, 48, 49, 37, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 37, 47, 41, 42, 44, 49, 48, 34, 32, 31, 45, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 31, 32, 40, 45, 37, 47, 39, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 37, 45, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 47, 31, 42, 46, 50, 44, 48, 40, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 47, 46, 35, 48, 34, 45, 40, 49, 37, 39, 32, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 41, 47, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009570121765136719, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012308835983276367, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 37, 40, 31, 35, 46, 39, 50, 34, 41, 32, 49, 48, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 45, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 35, 41, 40, 34, 39, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 31, 44, 32, 40, 45, 34, 48, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 49, 34, 35, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 34, 44, 47, 31, 37, 39, 40, 45, 42, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 37, 50, 41, 40, 31, 48, 42, 46, 35, 44, 34, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 47, 35, 42, 46, 39, 40, 37, 32, 31, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 48, 46, 31, 44, 47, 34, 49, 42, 40, 41, 50, 32, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 44, 35, 32, 50, 40, 37, 34, 45, 49, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 49, 31, 40, 48, 45, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 48, 31, 47, 42, 34, 44, 40, 39, 35, 49, 50, 46, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 31, 46, 48, 35, 44, 47, 37, 34, 40, 45, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [47, 37, 49, 40, 39, 44, 46, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009877681732177734, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 50, 45, 48, 46, 49, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 31, 40, 41, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 35, 46, 49, 45, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0032939910888671875, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.02856302261352539, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 49, 48, 41, 45, 31, 42, 44, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 42, 50, 37, 35, 46, 39, 44, 40, 47, 41, 45, 31, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 35, 47, 41, 42, 34, 39, 50, 48, 37, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 48, 40, 42, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010218143463134766, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 31, 44, 46, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 37, 44, 41, 40, 34, 31, 46, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 41, 47, 42, 48, 45, 32, 50, 37, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [44, 31, 49, 40, 39, 34, 42, 45, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009492158889770508, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 49, 45, 37, 39, 34, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 44, 47, 31, 34, 48, 46, 49, 39, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010417938232421875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 49, 44, 45, 39, 35, 34, 46, 37, 32, 48, 47, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except FileNotFoundError:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 50, 40, 44, 32, 37, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 31, 44, 39, 40, 32, 42, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 41, 44, 48, 34, 45, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 39, 48, 34, 45, 47, 41, 31, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 31, 45, 40, 37, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 31, 40, 44, 47, 41, 32, 42, 45, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 44, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009531974792480469, "tests_passed": true, "error": null}}
{"selected_lines": [35, 47, 48, 40, 37, 34, 39, 42, 44, 46, 41, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 49, 32, 45, 34, 46, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003993988037109375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 32, 45, 41, 49, 44, 37, 46, 40, 48, 47, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 46, 45, 50, 37, 31, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 44, 40, 39, 35, 42, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 37, 34, 35, 42, 39, 50, 48, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 41, 35, 32, 49, 50, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 49, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 41, 42, 39, 46, 32, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009529590606689453, "tests_passed": true, "error": null}}
{"selected_lines": [45, 32, 49, 37, 44, 40, 35, 39, 50, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 40, 44, 34, 32, 48, 39, 41, 45, 42, 50, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 35, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0045931339263916016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 45, 40, 48, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036499500274658203, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 40, 42, 37, 50, 35, 39, 31, 49, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0022630691528320312, "tests_passed": true, "error": null}}
{"selected_lines": [46, 31, 35, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 44, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 48, 31, 42, 44, 40, 32, 34, 46, 45, 50, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 39, 45, 41, 47, 34, 42, 32, 44, 31, 49, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 32, 46, 41, 48, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 42, 39, 35, 41, 46, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010544061660766602, "tests_passed": true, "error": null}}
{"selected_lines": [48, 35, 37, 41, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 34, 42, 45, 32, 35, 37, 46, 31, 41, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 35, 34, 40, 31, 39, 42, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 45, 46, 44, 41, 47, 35, 50, 31, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01254129409790039, "tests_passed": false, "error": "OSError"}}
{"selected_lines": [48, 49, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 50, 35, 34, 39, 42, 48, 49, 47, 40, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 39, 46, 31, 47, 50, 35, 32, 44, 42, 37, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 44, 46, 41, 31, 35, 40, 39, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 41, 37, 32, 44, 48, 47, 35, 45, 40, 42, 49, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 40, 44, 45, 34, 46, 50, 49, 39, 35, 41, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 42, 48, 31, 34, 41, 46, 37, 45, 50, 40, 47, 44, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 32, 42, 46, 35, 34, 45, 40, 48, 37, 47, 44, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 45, 39, 37, 47, 50, 49, 44, 34, 41, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 32, 49, 44, 41, 39, 34, 37, 35, 45, 46, 47, 31, 40, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 50, 44, 31, 40, 46, 49, 35, 48, 34, 41, 42, 39, 45, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 34, 41, 31, 50, 42, 40, 32, 37, 47, 35, 48, 45, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 34, 48, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 34, 35, 42, 47, 44, 50, 37, 45, 31, 41, 40, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.0001270771026611328, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 41, 45, 37, 40, 39, 46, 50, 32, 44, 49, 42, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010187625885009766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 45, 42, 50, 31, 49, 34, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 41, 47, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0039958953857421875, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 41, 37, 48, 34, 46, 50, 49, 45, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except FileNotFoundError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 40, 49, 37, 42, 34, 45, 44, 48, 46, 39, 47, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.00013494491577148438, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [31, 48, 49, 35, 34, 44, 46, 39, 37, 50, 42, 40, 41, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 40, 47, 32, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 39, 34, 50, 41, 46, 42, 40, 37, 48, 32, 31, 49, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 31, 39, 34, 47, 37, 41, 42, 44, 49, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 41, 40, 45, 34, 49, 50, 46, 39, 42, 31, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 39, 42, 47, 32, 31, 44, 46, 40, 49, 41, 50, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 40, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 49, 42, 31, 41, 47, 34, 50, 39, 32, 37, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 47, 48, 50, 31, 37, 34, 49, 40, 44, 46, 45, 39, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 41, 42, 48, 32, 46, 39, 49, 40, 47, 35, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 32, 49, 47, 31, 40, 48, 42, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 44, 41, 42, 39, 35, 31, 47, 48, 34, 37, 40, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.00013494491577148438, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [42, 41, 49, 47, 40, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 31, 47, 46, 41, 42, 34, 40, 50, 44, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 39, 40, 49, 50, 34, 42, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009448528289794922, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 35, 44, 39, 47, 34, 50, 48, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 35, 46, 34, 44, 39, 48, 49, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 46, 31, 47, 35, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [35, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036437511444091797, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.013738870620727539, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 35, 45, 32, 46, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010073184967041016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 49, 44, 50, 31, 46, 32, 37, 48, 40, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 49, 34, 47, 44, 35, 46, 42, 32, 41, 45, 39, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 48, 46, 50, 32, 44, 49, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 41, 42, 31, 47, 39, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 46, 35, 32, 39, 41, 37, 49, 50, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 48, 41, 34, 40, 50, 42, 35, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 49, 40, 42, 34, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 35, 41, 49, 40, 32, 45, 42, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004060983657836914, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 41, 32, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 44, 49, 45, 48, 50, 46, 37, 39, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010309219360351562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 41, 49, 42, 45, 47, 31, 34, 50, 44, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 45, 32, 50, 47, 41, 39, 48, 46, 40, 35, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except OSError as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0008947849273681641, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 50, 46, 32, 49, 35, 44, 37, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010218143463134766, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 34, 44, 48, 47, 40, 37, 35, 31, 32, 49, 41, 46, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 31, 48, 46, 45, 44, 32, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 32, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004107952117919922, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 45, 48, 35, 31, 46, 34, 42, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0038018226623535156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 40, 31, 46, 32, 34, 41, 47, 49, 48, 39, 35, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 48, 31, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 44, 50, 42, 40, 35, 37, 32, 48, 39, 34, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 45, 47, 48, 37, 42, 44, 40, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 40, 46, 37, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01474905014038086, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 45, 31, 40, 37, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009531974792480469, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 32, 35, 39, 41, 49, 34, 46, 47, 40, 44, 42, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009639263153076172, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 45, 46, 32, 49, 31, 37, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 39, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 45, 44, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 42, 32, 48, 49, 47, 44, 45, 39, 31, 46, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 42, 40, 50, 32, 46, 37, 45, 48, 49, 34, 35, 41, 44, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 46, 48, 37, 39, 47, 34, 42, 32, 35, 41, 31, 40, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 44, 39, 42, 34, 31, 41, 40, 35, 49, 45, 48, 50, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 42, 41, 46, 47, 39, 50, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 42, 50, 37, 32, 31, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 50, 40, 42, 31, 47, 49, 48, 32, 35, 39, 46, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except PermissionError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 31, 40, 41, 46, 37, 32, 35, 34, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 44, 31, 50, 45, 49, 47, 40, 39, 46, 32, 48, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 47, 37, 48, 40, 31, 49, 39, 45, 35, 50, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 32, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010467052459716797, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 45, 32, 44, 34, 31, 42, 48, 40, 46, 50, 37, 49, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 48, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 42, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009737014770507812, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 37, 35, 44, 32, 34, 40, 39, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 34, 48, 32, 41, 49, 47, 37, 42, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 50, 39, 35, 49, 32, 46, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009200572967529297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 45, 39, 35, 40, 31, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.001547098159790039, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.013738870620727539, "tests_passed": true, "error": null}}
{"selected_lines": [48, 31, 47, 45, 37, 35, 34, 46, 39, 40, 42, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 31, 48, 44, 34, 39, 45, 40, 50, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 50, 39, 47, 46, 32, 31, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 44, 31, 45, 35, 48, 41, 40, 42, 46, 32, 37, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 46, 34, 32, 47, 49, 45, 40, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0022020339965820312, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 49, 46, 48, 40, 44, 42, 31, 35, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012308835983276367, "tests_passed": true, "error": null}}
{"selected_lines": [31, 50, 41, 45, 40, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 34, 47, 49, 31, 46, 39, 35, 48, 41, 45, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except OSError as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 47, 50, 49, 39, 42, 35, 31, 34, 48, 40, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 49, 41, 47, 32, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 37, 39, 34, 41, 47, 31, 44, 50, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 49, 45, 35, 32, 48, 37, 41, 46, 39, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.000993967056274414, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 35, 34, 41, 47, 50, 48, 46, 32, 31, 37, 42, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 39, 47, 31, 35, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 42, 37, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 45, 34, 46, 47, 31, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 49, 32, 35, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0014388561248779297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 39, 45, 34, 49, 40, 37, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009710788726806641, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 50, 41, 49, 32, 39, 42, 40, 47, 34, 35, 31, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 39, 34, 35, 46, 44, 42, 48, 50, 45, 47, 40, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 41, 34, 32, 31, 48, 42, 40, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 46, 41, 47, 34, 50, 32, 42, 45, 40, 44, 48, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 45, 42, 44, 48, 39, 49, 35, 41, 50, 31, 32, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 37, 48, 41, 39, 42, 40, 46, 34, 44, 49, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 37, 40, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003507852554321289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 49, 34, 41, 35, 48, 44, 46, 32, 40, 45, 50, 47, 39, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004509925842285156, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 32, 48, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009791851043701172, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 35, 47, 49, 46, 41, 37, 32, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003602266311645508, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 47, 45, 39, 34, 41, 46, 32, 40, 31, 35, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009055852890014648, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 39, 49, 34, 50, 42, 37, 41, 31, 40, 44, 46, 48, 47, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 47, 41, 49, 32, 34, 37, 39, 44, 48, 46, 35, 40, 50, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except PermissionError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 50, 42, 45, 34, 40, 39, 46, 47, 37, 41, 32, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 44, 37, 41, 50, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 31, 42, 44, 46, 40, 39, 35, 47, 34, 32, 41, 45, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 45, 48, 32, 34, 40, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 46, 44, 32, 34, 45, 31, 41, 40, 47, 48, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 50, 39, 42, 31, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 31, 50, 40, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 44, 34, 39, 31, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 40, 44, 50, 37, 31, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 47, 50, 34, 40, 46, 44, 49, 35, 39, 37, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 35, 49, 39, 44, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 41, 46, 34, 44, 35, 45, 31, 32, 48, 47, 37, 50, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 34, 47, 40, 35, 48, 45, 49, 41, 37, 39, 42, 31, 44, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except OSError as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 44, 45, 42, 48, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 35, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.001461029052734375, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 47, 31, 35, 44, 37, 46, 39, 41, 49, 34, 42, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 50, 32, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004007816314697266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 49, 42, 45, 50, 48, 40, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003141164779663086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 46, 47, 48, 49, 34, 41, 45, 32, 42, 39, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 34, 32, 41, 40, 50, 39, 37, 35, 47, 48, 31, 49, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 44, 50, 40, 46, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0031440258026123047, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 47, 34, 44, 46, 48, 39, 45, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 49, 42, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0031909942626953125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 37, 39, 44, 32, 35, 31, 40, 49, 41, 48, 34, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 45, 32, 41, 50, 39, 48, 46, 49, 34, 44, 47, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 42, 48, 32, 39, 50, 40, 34, 47, 44, 41, 45, 49, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 31, 32, 41, 37, 45, 40, 35, 34, 39, 42, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 35, 50, 37, 46, 44, 39, 42, 47, 40, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 45, 49, 40, 31, 44, 42, 39, 47, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except OSError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.026584148406982422, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 45, 37, 46, 32, 39, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 46, 32, 48, 40, 49, 31, 47, 45, 50, 34, 42, 37, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 37, 35, 46, 40, 50, 41, 42, 34, 45, 31, 39, 48, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 41, 48, 37, 47, 32, 44, 34, 46, 31, 45, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010061264038085938, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 37, 47, 50, 45, 49, 32, 46, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 31, 49, 34, 35, 39, 45, 32, 40, 44, 48, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 34, 41, 32, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.013738870620727539, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 32, 39, 41, 50, 49, 37, 45, 48, 31, 42, 40, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 48, 46, 42, 39, 34, 35, 50, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 37, 35, 40, 31, 49, 32, 34, 48, 41, 46, 42, 44, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 44, 49, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 32, 44, 50, 47, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.001516580581665039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 42, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 44, 48, 42, 45, 47, 32, 34, 41, 40, 50, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except OSError as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0008969306945800781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 35, 48, 34, 44, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 34, 50, 41, 40, 44, 32, 47, 35, 48, 37, 42, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 48, 39, 50, 42, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036127567291259766, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 47, 35, 37, 44, 31, 41, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 48, 47, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 34, 50, 44, 45, 41, 39, 46, 37, 42, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 46, 44, 35, 41, 48, 34, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 48, 40, 32, 37, 45, 34, 42, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010622978210449219, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01191401481628418, "tests_passed": true, "error": null}}
{"selected_lines": [48, 37, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 32, 50, 47, 31, 45, 39, 40, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 48, 37, 42, 39, 50, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 47, 48, 40, 49, 32, 46, 37, 50, 41, 39, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009248256683349609, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 50, 39, 32, 46, 34, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 35, 50, 49, 31, 42, 37, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 42, 35, 41, 44, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 31, 32, 39, 46, 49, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.00013113021850585938, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 40, 48, 35, 47, 44, 32, 39, 34, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 34, 44, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003659963607788086, "tests_passed": true, "error": null}}
{"selected_lines": [47, 34, 49, 46, 44, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0035970211029052734, "tests_passed": true, "error": null}}
{"selected_lines": [42, 31, 37, 41, 35, 40, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 44, 47, 45, 42, 50, 48, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 32, 40, 37, 46, 31, 39, 45, 42, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 44, 48, 40, 37, 50, 47, 34, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 42, 48, 41, 32, 35, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 40, 45, 41, 48, 37, 50, 31, 44, 39, 42, 32, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 50, 42, 35, 32, 37, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0038957595825195312, "tests_passed": true, "error": null}}
{"selected_lines": [48, 37, 49, 47, 40, 39, 45, 35, 32, 34, 46, 41, 31, 42, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009055852890014648, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 37, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009450912475585938, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 40, 47, 46, 48, 31, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012317895889282227, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 32, 37, 34, 44, 35, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0035681724548339844, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010417938232421875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 34, 45, 49, 42, 40, 50, 32, 44, 48, 46, 35, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 50, 45, 46, 49, 40, 39, 37, 32, 47, 41, 31, 44, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 34, 31, 46, 50, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 44, 42, 48, 31, 45, 35, 46, 49, 39, 34, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 49, 39, 40, 50, 42, 37, 47, 41, 48, 46, 31, 44, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 46, 34, 49, 42, 31, 39, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 45, 47, 48, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 49, 31, 46, 35, 50, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 44, 50, 48, 41, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 34, 50, 32, 39, 35, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 49, 48, 31, 50, 35, 47, 37, 32, 40, 42, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 31, 50, 35, 37, 41, 40, 32, 49, 39, 34, 48, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 31, 32, 45, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 41, 34, 50, 31, 49, 48, 32, 40, 35, 46, 44, 45, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 44, 31, 45, 41, 32, 50, 34, 39, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 41, 45, 34, 48, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 50, 46, 31, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 37, 34, 31, 45, 40, 39, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 41, 44, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 45, 49, 42, 48, 31, 44, 41, 47, 34, 32, 46, 50, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 42, 45, 44, 46, 35, 49, 37, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 34, 32, 39, 40, 47, 48, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 50, 49, 48, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 49, 41, 31, 32, 40, 35, 48, 50, 47, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 39, 37, 31, 34, 41, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 44, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009348392486572266, "tests_passed": true, "error": null}}
{"selected_lines": [47, 31, 45, 39, 35, 41, 44, 46, 48, 37, 49, 42, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except OSError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 48, 49, 50, 34, 46, 47, 45, 42, 37, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 47, 40, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 34, 48, 49, 41, 40, 46, 37, 44, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 32, 31, 50, 34, 49, 44, 35, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 50, 48, 32, 35, 46, 45, 42, 39, 37, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 32, 46, 45, 49, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009431838989257812, "tests_passed": true, "error": null}}
{"selected_lines": [45, 31, 39, 49, 32, 41, 50, 47, 35, 37, 42, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 48, 49, 42, 50, 44, 35, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 42, 41, 47, 40, 37, 46, 39, 44, 45, 48, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 46, 48, 39, 40, 41, 35, 49, 37, 47, 50, 34, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 32, 44, 39, 49, 34, 46, 41, 37, 48, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 31, 35, 41, 39, 48, 32, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 32, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010375022888183594, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 48, 34, 35, 50, 42, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 37, 35, 42, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0013821125030517578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 47, 39, 40, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009458065032958984, "tests_passed": true, "error": null}}
{"selected_lines": [49, 35, 37, 47, 40, 45, 46, 41, 31, 34, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [49, 32, 39, 45, 41, 47, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0008931159973144531, "tests_passed": true, "error": null}}
{"selected_lines": [31, 44, 41, 42, 49, 40, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 32, 42, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00372314453125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 45, 46, 34, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0034787654876708984, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012317895889282227, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 47, 37, 39, 49, 44, 46, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 34, 41, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.00013113021850585938, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [44, 37, 41, 40, 49, 35, 42, 39, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 48, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 34, 45, 48, 32, 46, 47, 37, 31, 39, 49, 44, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.011327981948852539, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012496232986450195, "tests_passed": false, "error": "OSError"}}
{"selected_lines": [41, 32, 49, 39, 40, 42, 37, 35, 50, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 32, 48, 50, 31, 39, 45, 41, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 42, 34, 47, 50, 32, 35, 46, 48, 31, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 44, 48, 42, 32, 47, 41, 37, 31, 34, 49, 35, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 47, 44, 34, 37, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003482818603515625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 49, 44, 41, 35, 46, 40, 48, 45, 42, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except OSError as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009388923645019531, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 40, 49, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 31, 32, 48, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 50, 45, 49, 44, 46, 48, 35, 39, 34, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010622978210449219, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 37, 50, 45, 48, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 39, 41, 40, 48, 44, 31, 42, 49, 47, 37, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46, 42, 37, 31, 40, 39, 35, 32, 44, 34, 50, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 49, 48, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009911060333251953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 32, 47, 50, 44, 34, 48, 37, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 49, 47, 31, 32, 34, 42, 41, 50, 44, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 32, 48, 39, 40, 42, 34, 31, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 46, 42, 50, 35, 44, 48, 32, 37, 45, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012496232986450195, "tests_passed": false, "error": "OSError"}}
{"selected_lines": [34, 42, 47, 44, 40, 37, 48, 49, 50, 32, 39, 31, 35, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010861873626708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009874820709228516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 49, 32, 48, 35, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 31, 42, 45, 44, 41, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 40, 35, 48, 31, 50, 37, 47, 46, 49, 32, 44, 39, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 50, 40, 42, 32, 46, 41, 35, 34, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 48, 37, 47, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 48, 49, 35, 37, 50, 42, 41, 44, 46, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 37, 44, 47, 32, 31, 45, 46, 35, 49, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.011393070220947266, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 44, 41, 34, 45, 42, 35, 31, 48, 37, 32, 49, 46, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 41, 45, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 31, 35, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036530494689941406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 41, 46, 39, 34, 37, 49, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 37, 49, 50, 42, 31, 40, 48, 34, 47, 46, 44, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 45, 34, 47, 50, 41, 31, 48, 37, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 35, 34, 47, 37, 42, 41, 45, 49, 46, 32, 39, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 34, 46, 40, 48, 49, 50, 39, 32, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 49, 44, 37, 34, 32, 48, 46, 45, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 48, 44, 50, 40, 39, 46, 49, 45, 37, 31, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 44, 39, 32, 47, 41, 31, 46, 50, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 31, 42, 45, 35, 47, 50, 39, 32, 46, 49, 37, 48, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 47, 50, 45, 35, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 34, 48, 44, 49, 39, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.000985860824584961, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 32, 46, 41, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 32, 42, 48, 45, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 46, 39, 40, 47, 31, 32, 42, 44, 34, 49, 50, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009000301361083984, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 42, 35, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003175973892211914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 50, 46, 47, 40, 39, 44, 48, 42, 35, 34, 49, 41, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 46, 49, 42, 34, 48, 40, 50, 37, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 44, 40, 46, 34, 35, 48, 47, 41, 49, 39, 32, 50, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 42, 49, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003164052963256836, "tests_passed": true, "error": null}}
{"selected_lines": [47, 32, 42, 39, 31, 49, 46, 37, 48, 50, 44, 45, 40, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0066640377044677734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010464906692504883, "tests_passed": true, "error": null}}
{"selected_lines": [32, 50, 42, 48, 37, 34, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0066640377044677734, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 39, 41, 46, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0041849613189697266, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 46, 35, 42, 37, 40, 45, 50, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 42, 50, 47, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.02856302261352539, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 32, 48, 46, 31, 47, 50, 40, 41, 37, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except OSError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 44, 41, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 48, 42, 44, 40, 50, 32, 34, 31, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47, 35, 37, 45, 44, 42, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0031502246856689453, "tests_passed": true, "error": null}}
{"selected_lines": [47, 35, 32, 46, 39, 45, 44, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.000946044921875, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 32, 31, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 37, 40, 49, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003538846969604492, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 41, 40, 35, 47, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 37, 49, 50, 32, 34, 48, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009655952453613281, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 47, 44, 45, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 46, 44, 40, 35, 48, 31, 41, 45, 37, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009741783142089844, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 37, 34, 40, 44, 46, 35, 32, 41, 47, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036530494689941406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 46, 41, 45, 31, 37, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 40, 47, 46, 39, 44, 42, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 42, 34, 46, 41, 40, 35, 39, 47, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 41, 46, 32, 45, 50, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010139942169189453, "tests_passed": true, "error": null}}
{"selected_lines": [49, 37, 45, 47, 44, 50, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009541511535644531, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 48, 32, 40, 45, 41, 47, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 48, 39, 46, 40, 42, 37, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009055852890014648, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 48, 45, 31, 42, 34, 50, 40, 39, 32, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 47, 31, 46, 32, 50, 44, 42, 45, 41, 40, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009942054748535156, "tests_passed": true, "error": null}}
{"selected_lines": [47, 37, 49, 32, 41, 35, 48, 46, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 37, 41, 49, 34, 40, 46, 39, 45, 50, 47, 44, 42, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009088516235351562, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 39, 49, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009537696838378906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 49, 31, 48, 35, 50, 47, 41, 45, 34, 42, 37, 40, 46, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 47, 44, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 50, 44, 49, 39, 48, 47, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except OSError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 40, 48, 50, 47, 42, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 49, 47, 48, 41, 44, 37, 50, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 44, 35, 31, 37, 40, 45, 49, 42, 48, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 32, 35, 47, 48, 41, 44, 49, 50, 40, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 40, 35, 48, 41, 44, 34, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 32, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0013740062713623047, "tests_passed": true, "error": null}}
{"selected_lines": [46, 35, 32, 40, 49, 34, 50, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 40, 39, 35, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0008902549743652344, "tests_passed": true, "error": null}}
{"selected_lines": [47, 37, 50, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003577709197998047, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 50, 44, 48, 31, 37, 35, 41, 32, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 45, 41, 42, 44, 34, 31, 46, 35, 32, 47, 50, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 48, 31, 49, 34, 50, 39, 46, 44, 42, 47, 37, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 40, 49, 35, 46, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 49, 37, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 34, 31, 50, 32, 45, 41, 44, 46, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 32, 49, 39, 37, 31, 47, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009968280792236328, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01003122329711914, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 41, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009825944900512695, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 39, 46, 48, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01117086410522461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 45, 49, 40, 37, 39, 47, 48, 44, 34, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except OSError as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009140968322753906, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010467052459716797, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 46, 49, 41, 37, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 48, 40, 37, 44, 46, 31, 39, 50, 45, 49, 41, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 46, 42, 48, 35, 44, 37, 49, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}}
{"selected_lines": [48, 40, 37, 35, 45, 42, 32, 50, 44, 34, 47, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 42, 50, 34, 49, 41, 32, 35, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 39, 31, 50, 44, 47, 40, 35, 41, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009541511535644531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 50, 49, 34, 48, 45, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 46, 35, 50, 49, 37, 32, 45, 40, 44, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 42, 45, 46, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 48, 47, 35, 40, 34, 39, 49, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 49, 48, 45, 41, 37, 50, 32, 44, 40, 34, 47, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40, 37, 49, 42, 44, 46, 34, 41, 50, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 37, 48, 39, 34, 44, 31, 32, 41, 35, 49, 45, 50, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 44, 49, 42, 31, 35, 34, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.008972644805908203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [39, 44, 34, 41, 32, 49, 50, 35, 40, 48, 46, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 41, 32, 34, 48, 50, 44, 46, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 45, 42, 41, 35, 48, 47, 40, 49, 50, 32, 31, 34, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 41, 44, 42, 39, 48, 40, 37, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 42, 34, 48, 40, 35, 44, 32, 31, 47, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 40, 45, 47, 41, 44, 39, 42, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009229183197021484, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 39, 46, 42, 40, 34, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0014469623565673828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 35, 37, 31, 45, 47, 48, 46, 42, 44, 32, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 47, 50, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0031249523162841797, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 47, 45, 44, 35, 31, 40, 37, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 32, 41, 49, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 31, 48, 46, 44, 34, 49, 45, 40, 35, 41, 42, 37, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010385990142822266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 50, 47, 40, 37, 34, 31, 48, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 44, 39, 40, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 47, 50, 32, 40, 35, 31, 44, 41, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 35, 47, 32, 34, 46, 37, 39, 45, 40, 31, 44, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 32, 40, 41, 37, 35, 31, 47, 34, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 50, 44, 41, 34, 42, 35, 48, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 46, 40, 49, 35, 37, 31, 50, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 46, 44, 37, 35, 34, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 45, 34, 40, 49, 31, 37, 42, 46, 44, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 32, 49, 50, 35, 39, 48, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 44, 42, 35, 47, 39, 37, 49, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 48, 31, 39, 34, 50, 35, 46, 37, 47, 45, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 45, 46, 49, 41, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 40, 39, 31, 41, 48, 49, 47, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 48, 32, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 49, 32, 31, 41, 48, 42, 46, 39, 47, 35, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except OSError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 40, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 44, 31, 49, 41, 42, 40, 37, 48, 47, 35, 32, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 34, 40, 44, 46, 42, 48, 37, 49, 35, 45, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 47, 42, 41, 37, 40, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 39, 35, 47, 37, 45, 40, 42, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 41, 31, 44, 45, 42, 48, 47, 46, 39, 37, 40, 34, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 44, 47, 48, 41, 49, 46, 34, 39, 45, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 37, 47, 49, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0035059452056884766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 39, 50, 47, 41, 42, 48, 46, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 37, 31, 46, 47, 39, 32, 40, 41, 34, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 34, 49, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0034630298614501953, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 31, 42, 34, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 32, 45, 49, 37, 35, 50, 42, 31, 44, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 40, 42, 31, 34, 50, 35, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009055852890014648, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 47, 46, 49, 37, 48, 31, 35, 41, 39, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 42, 40, 31, 46, 48, 50, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 41, 31, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 50, 32, 45, 39, 42, 40, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 46, 49, 44, 47, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 32, 41, 31, 39, 47, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 50, 32, 47, 40, 45, 48, 46, 44, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 47, 32, 34, 50, 45, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.004465818405151367, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 46, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 31, 47, 48, 35, 39, 44, 49, 32, 40, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009851455688476562, "tests_passed": true, "error": null}}
{"selected_lines": [37, 49, 40, 44, 31, 39, 34, 41, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 41, 49, 48, 35, 45, 39, 46, 37, 34, 40, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 50, 45, 47, 49, 35, 31, 46, 37, 41, 48, 34, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 37, 48, 44, 32, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 34, 41, 40, 32, 39, 31, 50, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009279251098632812, "tests_passed": true, "error": null}}
{"selected_lines": [31, 42, 47, 46, 35, 37, 39, 48, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 32, 50, 37, 39, 35, 44, 40, 48, 31, 42, 45, 41, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 42, 39, 49, 34, 41, 32, 40, 50, 31, 37, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 42, 50, 41, 34, 49, 46, 48, 31, 44, 40, 45, 37, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0032279491424560547, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010252952575683594, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 49, 45, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010077953338623047, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 46, 37, 45, 49, 44, 42, 32, 50, 41, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 40, 31, 45, 47, 50, 44, 49, 42, 46, 35, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 48, 32, 44, 31, 40, 50, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 41, 39, 42, 47, 45, 31, 50, 35, 48, 37, 44, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 49, 50, 47, 31, 40, 39, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 39, 48, 34, 35, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 47, 37, 31, 34, 44, 48, 39, 45, 42, 40, 35, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 48, 37, 44, 45, 31, 32, 47, 42, 50, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 31, 34, 42, 39, 32, 49, 47, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 46, 50, 31, 37, 49, 39, 44, 41, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 32, 48, 41, 39, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 49, 44, 46, 42, 32, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0021810531616210938, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 32, 40, 50, 37, 41, 45, 34, 35, 42, 46, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except OSError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 42, 44, 31, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 40, 50, 35, 32, 46, 49, 44, 47, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 32, 41, 48, 31, 37, 34, 39, 35, 46, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 50, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036928653717041016, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 45, 42, 31, 48, 39, 32, 40, 34, 37, 44, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 34, 39, 37, 42, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009870529174804688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 39, 50, 35, 46, 47, 41, 49, 44, 34, 40, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 39, 46, 42, 45, 41, 44, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 35, 39, 47, 41, 31, 50, 42, 34, 46, 40, 37, 45, 49, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except OSError as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 31, 47, 37, 49, 46, 35, 40, 39, 48, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009675979614257812, "tests_passed": true, "error": null}}
{"selected_lines": [32, 49, 34, 31, 47, 44, 48, 37, 42, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 45, 39, 46, 42, 32, 47, 48, 35, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 50, 41, 35, 48, 32, 42, 31, 37, 39, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 41, 44, 32, 49, 46, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 31, 49, 34, 40, 41, 47, 32, 35, 50, 48, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 31, 35, 32, 39, 45, 34, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 45, 31, 34, 42, 50, 49, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 48, 41, 32, 34, 40, 46, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010654211044311523, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 32, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 45, 35, 42, 40, 31, 50, 44, 48, 41, 46, 47, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009507179260253906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 49, 40, 39, 44, 48, 31, 41, 37, 34, 35, 46, 45, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 32, 31, 42, 34, 45, 49, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 32, 37, 34, 44, 31, 50, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 46, 37, 42, 39, 49, 32, 48, 44, 35, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 48, 31, 42, 37, 46, 34, 41, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 32, 46, 45, 44, 41, 34, 37, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 39, 40, 31, 48, 32, 45, 42, 44, 35, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 41, 42, 37, 45, 48, 35, 50, 34, 31, 47, 46, 39, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 37, 39, 50, 41, 32, 31, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 32, 45, 37, 49, 31, 40, 46, 39, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 37, 49, 32, 44, 34, 41, 35, 46, 31, 42, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 44, 32, 48, 46, 39, 31, 42, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 49, 48, 31, 35, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 31, 47, 42, 48, 49, 32, 34, 39, 41, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 34, 48, 39, 41, 50, 32, 46, 31, 35, 40, 37, 42, 47, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 32, 31, 35, 48, 34, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 49, 45, 40, 32, 47, 42, 35, 39, 44, 50, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010241031646728516, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 41, 34, 42, 47, 49, 39, 50, 31, 46, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 46, 45, 41, 37, 34, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 31, 32, 39, 46, 35, 44, 42, 45, 41, 48, 40, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 49, 35, 42, 32, 45, 50, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 32, 37, 39, 42, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009893178939819336, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 46, 47, 41, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00410008430480957, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 48, 46, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 48, 35, 41, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 45, 39, 41, 34, 44, 31, 35, 49, 46, 32, 42, 37, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except OSError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 37, 50, 34, 46, 44, 31, 35, 49, 40, 42, 47, 48, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except OSError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 40, 49, 41, 44, 31, 32, 50, 35, 39, 48, 46, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 34, 35, 46, 32, 49, 48, 47, 45, 41, 42, 31, 39, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except PermissionError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 31, 47, 35, 42, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 31, 40, 49, 50, 42, 48, 46, 32, 34, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 50, 44, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 46, 45, 40, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 32, 48, 34, 45, 37, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0035200119018554688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 37, 50, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 49, 47, 34, 45, 41, 35, 31, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 44, 42, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 48, 45, 35, 41, 47, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 32, 31, 41, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 46, 48, 45, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036270618438720703, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.012317895889282227, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 39, 47, 40, 49, 41, 37, 32, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 44, 39, 50, 41, 47, 37, 46, 49, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 39, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 37, 48, 31, 41, 39, 44, 35, 34, 46, 32, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except FileNotFoundError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 41, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 46, 39, 47, 40, 42, 48, 44, 45, 37, 32, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 34, 50, 32, 46, 42, 44, 45, 47, 41, 35, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 44, 45, 34, 42, 37, 39, 49, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 44, 41, 46, 40, 35, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 35, 37, 47, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 46, 44, 37, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004055976867675781, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 32, 31, 46, 34, 49, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 45, 40, 31, 46, 39, 50, 41, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 35, 49, 32, 48, 39, 37, 31, 46, 45, 47, 42, 50, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01191401481628418, "tests_passed": true, "error": null}}
{"selected_lines": [48, 35, 37, 34, 47, 49, 46, 32, 45, 44, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 49, 42, 50, 45, 31, 41, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 50, 37, 32, 47, 41, 45, 48, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 48, 40, 32, 46, 45, 34, 35, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 39, 45, 37, 35, 31, 42, 48, 44, 32, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 48, 40, 50, 41, 31, 42, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 44, 46, 47, 45, 31, 34, 37, 39, 32, 50, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 40, 46, 49, 50, 42, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}' from the directory '{directory}'.\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003216981887817383, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 45, 34, 46, 32, 48, 40, 35, 42, 49, 37, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 31, 34, 39, 46, 50, 48, 44, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 50, 41, 39, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009708404541015625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 47, 44, 45, 37, 49, 48, 46, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 50, 35, 31, 34, 45, 47, 40, 46, 49, 48, 41, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01254129409790039, "tests_passed": false, "error": "OSError"}}
{"selected_lines": [45, 40, 44, 39, 35, 47, 50, 42, 49, 46, 32, 41, 34, 37, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except PermissionError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 35, 32, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 49, 31, 50, 37, 40, 32, 45, 35, 41, 48, 44, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 32, 48, 42, 39, 41, 40, 44, 37, 34, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 48, 37, 46, 50, 34, 40, 32, 47, 31, 45, 35, 41, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 32, 45, 34, 44, 35, 50, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003626585006713867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 47, 40, 31, 42, 44, 49, 50, 41, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.002187967300415039, "tests_passed": true, "error": null}}
{"selected_lines": [46, 31, 34, 47, 42, 44, 41, 32, 39, 48, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 31, 39, 50, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 45, 41, 42, 47, 37, 46, 39, 44, 32, 31, 48, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0038299560546875, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 46, 35, 42, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 31, 49, 47, 46, 37, 45, 35, 44, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 45, 46, 44, 50, 42, 37, 34, 35, 48, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010654211044311523, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 42, 45, 32, 44, 48, 39, 46, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01058506965637207, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 44, 47, 42, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009507179260253906, "tests_passed": true, "error": null}}
{"selected_lines": [31, 41, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 37, 32, 49, 47, 34, 50, 42, 48, 31, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 45, 47, 34, 49, 32, 48, 46, 42, 31, 37, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 49, 31, 47, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 47, 41, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009238719940185547, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 45, 32, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0035581588745117188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 44, 47, 40, 37, 48, 42, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 44, 47, 45, 34, 35, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 40, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 45, 31, 46, 42, 35, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [48, 32, 46, 35, 34, 47, 42, 39, 37, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 31, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 31, 37, 46, 47, 39, 49, 44, 41, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 37, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 45, 48, 39, 44, 42, 35, 40, 31, 41, 47, 32, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 45, 31, 50, 41, 34, 48, 47, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 47, 32, 50, 44, 49, 46, 40, 39, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 49, 50, 37, 45, 34, 47, 31, 39, 32, 40, 42, 41, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 46, 34, 47, 31, 41, 48, 35, 40, 50, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 34, 47, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003130197525024414, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 44, 50, 35, 31, 49, 37, 48, 47, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' was removed.\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 40, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0035800933837890625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 37, 48, 39, 34, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 39, 49, 48, 45, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009987354278564453, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [32, 47, 39, 45, 50, 37, 31, 44, 49, 35, 40, 46, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 42, 47, 40, 45, 35, 31, 37, 48, 50, 32, 49, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist: {}\".format(directory))\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except PermissionError:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 32, 44, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 50, 39, 31, 48, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 37, 32, 45, 35, 50, 46, 48, 41, 34, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 37, 40, 50, 45, 34, 41, 47, 35, 49, 48, 39, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 45, 47, 44, 50, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009541511535644531, "tests_passed": true, "error": null}}
{"selected_lines": [50, 34, 40, 31, 45, 47, 41, 49, 35, 37, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 42, 39, 37, 49, 46, 48, 34, 40, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40, 46, 50, 44, 34, 47, 48, 37, 35, 31, 49, 42, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 31, 41, 46, 50, 45, 44, 47, 35, 32, 42, 34, 49, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find(\"jquery\") > -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.008972644805908203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [35, 32, 37, 39, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009188652038574219, "tests_passed": true, "error": null}}
{"selected_lines": [48, 40, 49, 34, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 49, 31, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 48, 42, 47, 45, 37, 41, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 48, 42, 37, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0031769275665283203, "tests_passed": true, "error": null}}
{"selected_lines": [46, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01075291633605957, "tests_passed": true, "error": null}}
{"selected_lines": [44, 32, 47, 35, 50, 39, 34, 40, 45, 31, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009970664978027344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 41, 48, 32, 47, 49, 31, 42, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 39, 47, 46, 44, 42, 45, 48, 40, 32, 35, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 32, 45, 31, 42, 44, 39, 34, 40, 50, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 31, 46, 47, 45, 44, 42, 41, 49, 37, 35, 32, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 42, 39, 31, 48, 40, 37, 49, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except OSError as e:\n                logging.error(f\"Failed to remove jQuery file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 32, 42, 45, 46, 48, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery') or file.endswith('.min.js') or file.endswith('.map'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 50, 34, 32, 42, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 39, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.000904083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009874820709228516, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 50, 32, 45, 39, 35, 48, 49, 34, 42, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009620189666748047, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 40, 49, 39, 37, 47, 41, 42, 44, 46, 34, 35, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 41, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 49, 37, 50, 39, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 49, 34, 48, 45, 50, 47, 42, 32, 46, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except OSError as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004171609878540039, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01075291633605957, "tests_passed": true, "error": null}}
{"selected_lines": [46, 37, 50, 49, 32, 31, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 44, 42, 50, 40, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 49, 41, 39, 47, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 31, 47, 44, 48, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 49, 46, 31, 41, 35, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009528160095214844, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 41, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 32, 37, 45, 44, 42, 41, 48, 31, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 31, 47, 34, 39, 42, 37, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009980201721191406, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 31, 32, 46, 41, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0032320022583007812, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 31, 39, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01038217544555664, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 31, 47, 45, 48, 37, 50, 42, 46, 40, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except FileNotFoundError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 41, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0037200450897216797, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 37, 35, 41, 44, 39, 48, 34, 40, 31, 47, 45, 49, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except OSError as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 50, 35, 31, 45, 46, 47, 48, 40, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010544061660766602, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 39, 31, 49, 50, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 49, 46, 37, 48, 32, 31, 41, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 49, 47, 50, 44, 40, 41, 39, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009501934051513672, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 50, 37, 45, 48, 44, 47, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010112762451171875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 48, 44, 34, 40, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 49, 41, 45, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 32, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0036580562591552734, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 47, 44, 32, 45, 50, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.004214048385620117, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 32, 39, 42, 49, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"An error occurred while removing file {file}: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 41, 46, 49, 42, 39, 34, 35, 50, 37, 48, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith('.js'):  # Only consider .js files\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 31, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 47, 42, 50, 32, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0032711029052734375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 39, 47, 35, 48, 40, 32, 46, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": false, "time": 0.00013113021850585938, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 44, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.001062154769897461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 44, 40, 39, 37, 48, 45, 41, 47, 42, 32, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.008250236511230469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [48, 49, 42, 35, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0032739639282226562, "tests_passed": true, "error": null}}
{"selected_lines": [50, 34, 44, 48, 40, 45, 49, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 31, 44, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 45, 34, 46, 49, 40, 48, 50, 47, 32, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except FileNotFoundError:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 35, 41, 47, 49, 37, 40, 50, 48, 44, 45, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except OSError as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 42, 40, 34, 44, 41, 50, 49, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 39, 34, 44, 50, 32, 31, 40, 41, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format=\"%(asctime)s %(filename)s:%(lineno)s %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 41, 31, 44, 48, 37, 32, 47, 35, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\",\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 31, 44, 41, 49, 32, 42, 48, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 42, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return (removed_files, removed_file_names)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 42, 45, 46, 35, 37, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 32, 35, 46, 47, 31, 44, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010347127914428711, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 35, 41, 40, 47, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 48, 39, 40, 50, 45, 44, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing '{file}': {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 35, 45, 31, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 44, 35, 39, 31, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 31, 37, 44, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 41, 39, 44, 37, 32, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 42, 35, 40, 34, 48, 44, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'Removed: {file}')\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 45, 31, 46, 47, 50, 40, 42, 41, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 47, 48, 39, 31, 44, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 32, 40, 41, 35, 48, 50, 45, 37, 31, 39, 49, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except PermissionError:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 41, 42, 39, 32, 46, 35, 50, 37, 44, 49, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 48, 40, 50, 47, 41, 49, 35, 45, 39, 34, 31, 37, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=f\"%(asctime)s:%(levelname)s:%(name)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from '{directory}'.\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 39, 40, 50, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 44, 47, 37, 50, 42, 35, 45, 49, 34, 48, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except FileNotFoundError:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 35, 50, 37, 49, 47, 48, 32, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 45, 48, 34, 32, 49, 42, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.endswith(\".js\") and \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 49, 42, 32, 45, 40, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.003993034362792969, "tests_passed": true, "error": null}}
{"selected_lines": [35, 48, 32, 50, 41, 34, 40, 47, 39, 42, 45, 46, 49, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 42, 31, 35, 39, 45, 49, 48, 41, 34, 44, 32, 37, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)-8s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010128021240234375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 34, 44, 41, 32, 37, 35, 49, 40, 45, 48, 50, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error removing jQuery file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 41, 42, 32, 37, 44, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0016088485717773438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 44, 46, 50, 41, 39, 45, 48, 35, 34, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 50, 37, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0033311843872070312, "tests_passed": true, "error": null}}
{"selected_lines": [50, 40, 34, 42, 47, 32, 46, 49, 41, 31, 37, 45, 48, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 46, 47, 49, 37, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO, format=\"%(asctime)s %(message)s\")\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 46, 50, 32, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.001068115234375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 46, 48, 37, 40, 41, 45, 44, 39, 32, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(f\"{directory}/{file}\")\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 41, 42, 46, 34, 31, 48, 37, 32, 50, 40, 35, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 50, 45, 46, 39, 42, 48, 32, 31, 37, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 35, 42, 37, 40, 48, 47, 32, 39, 50, 49, 44, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from the directory.\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.00882101058959961, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01191401481628418, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009537696838378906, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.013705968856811523, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.010236263275146484, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 44, 35, 32, 46, 50, 39, 31, 49, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.startswith(\"jquery\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 42, 41, 31, 47, 48, 40, 37, 35, 32, 49, 34, 50, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format=\"%(asctime)s %(message)s\", datefmt=\"%H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 35, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0034041404724121094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 47, 49, 39, 37, 41, 35, 42, 48, 44, 46, 34, 40], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\", datefmt=\"%m/%d/%Y %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if \"jquery\" in file.lower():  # 'jquery' is lowercased to handle file names with capital 'J'\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 40, 37, 44, 39, 32, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.001049041748046875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 50, 31, 40, 44, 35, 49, 37, 34, 47, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove jQuery file: {file}\", exc_info=e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009055852890014648, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 37, 48, 44, 47, 35, 31, 41, 39, 50, 40, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 39, 46, 42, 49, 32, 45, 37, 44, 34, 40, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(name)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if \"jquery\" in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except FileNotFoundError:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 42, 50, 37, 31, 41, 35, 32, 40, 39, 49, 45, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s %(message)s')\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except OSError as e:\n                logging.exception(f\"Error removing file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 44, 41, 48, 39, 31, 34, 37], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 31, 34, 39, 40, 32, 44, 45, 47, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s [%(levelname)s] - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 42, 34, 37, 49, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.exception(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 46, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 49, 46, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009692192077636719, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 37, 34, 44, 42, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 42, 46, 50, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {type(e).__name__}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 37, 47, 40, 31, 44, 42, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f'File removed: {file}')\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009331703186035156, "tests_passed": true, "error": null}}
{"selected_lines": [48, 37, 34, 45, 49, 41, 50, 40, 35, 42, 44, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Failed to remove {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 31, 32, 39, 42, 35, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist!\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 41, 35, 42, 34, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 42, 48, 35, 37, 39, 44, 50, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 42, 49, 37, 31, 35, 50, 41, 45, 44, 40, 32, 46, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 34, 41, 49, 48, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing jQuery file: {file}. Error: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.011085033416748047, "tests_passed": true, "error": null}}
{"selected_lines": [31, 44, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 34, 46, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 31, 46, 42, 45, 47, 41, 49, 50, 39, 48, 34], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. Reason: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 41, 40, 48, 50, 34, 32, 37, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 37, 42, 40, 47, 41, 39, 44, 46, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 48, 44, 47, 45, 31, 35, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing file: {file}, {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 47, 35, 44, 40, 45, 39, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory doesn't exist\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(directory + '/' + file)\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 31, 35, 48, 41, 39, 37, 44, 45, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found: {0}\".format(directory))\n    # Get all files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File {file} removed successfully.\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 45, 35, 48, 37, 44, 46, 34, 50, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s:%(levelname)s:%(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed '{file}'\")\n            except PermissionError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 34, 31, 41, 42, 44, 40, 32, 50, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.startswith('jquery'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 48, 37, 39, 47, 45, 46, 32, 35, 34, 40, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 41, 34, 31, 39, 46, 45, 32, 48, 37, 44], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.001516103744506836, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 37, 48, 35, 50, 42, 32, 45, 31, 49], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 41, 46, 32, 47, 49, 39, 37, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') != -1:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"File '{file}' removed successfully.\")\n            except OSError as e:\n                logging.warning(f\"Error while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010139942169189453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 40, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 37, 45, 35, 34, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.009055852890014648, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 50, 35, 39, 46], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009388923645019531, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 40, 37, 34, 32, 42, 48, 31, 35, 46, 47, 41, 39, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.startswith(\"jquery\") or file.endswith(\".js\"):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing file: {file} - {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 32, 45, 34, 41, 31, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.DEBUG)\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing '{file}': {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 37, 44, 45, 50, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [file for file in os.listdir(directory) if file.endswith('.js')]\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file_name in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 34, 42, 39, 48, 44, 45, 37, 40, 35, 31, 41, 32], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s %(levelname)s %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file_name in files:\n        if file.lower().find('jquery') != -1 and os.path.isfile(os.path.join(directory, file)):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error removing jQuery file: {file}. {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 46, 40, 32, 37, 35, 49, 44, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s: %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except PermissionError:\n                logging.error(f\"Error removing jQuery file: {file}. Exception: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 31, 39, 49, 35], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n                        format=f\"%(asctime)s:%(levelname)s:%(module)s:%(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"An error occurred while removing file: {file}. Error: {str(e)}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0010290145874023438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 32, 39, 37, 35, 45, 34, 48, 50], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 48, 46, 45, 49, 44, 31, 42, 50, 35, 34, 40, 47, 41], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format=\"%(asctime)s - %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\")\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed file '{file}'\")\n            except FileNotFoundError:\n                logging.error(f\"Failed to remove jQuery file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 37, 32, 45, 35, 44, 42, 40, 49, 50, 34, 48, 39], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format=\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory)\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().startswith('jquery') and file.lower().endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0009157657623291016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 35, 42, 49, 40, 48, 31], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename=\"jquery_removal.log\", level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Failed to remove file: {file}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except OSError:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.01474905014038086, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 34, 47, 49, 44, 35, 39, 41, 42, 48, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = [filename for filename in os.listdir(directory)]\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except FileNotFoundError:\n                logging.exception(e)\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 44, 50, 32, 42, 31, 46, 45], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s [%(levelname)s] %(message)s\")\n    # Check if directory exists\n    if os.path.isdir(directory) is False:\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():  # Case-insensitive search\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 42, 41, 37, 35, 50, 32, 40, 31, 47], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format=\"%(asctime)s - %(levelname)s: %(message)s\")\n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(directory + \" does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if file.lower().find('jquery') > 0:\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed {file} from {directory}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 31, 34, 39, 46, 42], "result": {"code": "import os\nimport logging\n\ndef task_func(directory):\n    \"\"\"\n    Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\n\n    Parameters:\n    directory (str): The directory path.\n\n    Returns:\n    tuple: A tuple containing two elements:\n        - int: The number of files removed.\n        - list: The names of the removed files.\n\n    Raises:\n    - If the specified directory does not exist the code would raise FileNotFoundError.\n    \n    Note:\n    - Removed files are logged in 'jquery_removal.log' file.\n\n    Requirements:\n    - os\n    - logging\n\n\n    Example:\n    >>> task_func(\"/path/to/directory\")\n    (3, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])  # Assuming 3 jQuery files were removed\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO)\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    # Get all files in the directory\n    files = os.listdir(directory)\n    # Remove jQuery files\n    removed_files = []\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file.lower():\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n    return removed_files, removed_file_names", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
